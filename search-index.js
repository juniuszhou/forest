var searchIndex={};
searchIndex["actor"] = {"doc":"","i":[[3,"AccountActorState","actor","AccountActorState includes the address for the actor",null,null],[12,"address","","",0,null],[3,"AccountActorCode","","",null,null],[3,"CronActorState","","CronActorState has no internal state",null,null],[3,"CronTableEntry","","",null,null],[3,"CronActorCode","","",null,null],[3,"InitActorState","","InitActorState is reponsible for creating",null,null],[3,"InitActorCode","","",null,null],[3,"Reward","","",null,null],[12,"start_epoch","","",1,null],[12,"value","","",1,null],[12,"release_rate","","",1,null],[12,"amount_withdrawn","","",1,null],[3,"RewardActorState","","RewardActorState has no internal state",null,null],[12,"reward_map","","",2,null],[3,"RewardActorCode","","",null,null],[3,"StoragePowerActorState","","State of storage power actor",null,null],[3,"StoragePowerActorCode","","",null,null],[3,"ActorID","","Identifier for Actors, includes builtin and initialized…",null,null],[3,"ActorState","","State of all actor implementations",null,null],[4,"AccountMethod","","",null,null],[13,"Constructor","","",3,null],[4,"CronMethod","","",null,null],[13,"Constructor","","",4,null],[13,"Cron","","",4,null],[4,"InitMethod","","",null,null],[13,"Constructor","","",5,null],[13,"Exec","","",5,null],[13,"GetActorIDForAddress","","",5,null],[4,"RewardMethod","","",null,null],[13,"Constructor","","",6,null],[13,"MintReward","","",6,null],[13,"WithdrawReward","","",6,null],[4,"StoragePowerMethod","","Method definitions for Storage Power Actor",null,null],[13,"Constructor","","Constructor for Storage Power Actor",7,null],[13,"GetTotalStorage","","Gets the total storage for the network",7,null],[4,"CodeID","","CodeID is the reference to the code which is attached to…",null,null],[13,"Init","","",8,null],[13,"Cron","","",8,null],[13,"Account","","",8,null],[13,"PaymentChannel","","",8,null],[13,"StoragePower","","",8,null],[13,"StorageMiner","","",8,null],[13,"StorageMarket","","",8,null],[13,"CustomCode","","",8,null],[11,"assign_next_id","","Assigns next available ID and incremenets the next_id…",9,[[["self"]],["actorid"]]],[11,"withdraw_reward","","",2,[[["address"],["rt"]],["tokenamount"]]],[11,"is_builtin","","Returns true if cid is builtin Actor",8,[[["self"]],["bool"]]],[11,"is_singleton","","Returns true if cid is singleton Actor",8,[[["self"]],["bool"]]],[8,"Actor","","Actor trait which defines the common functionality of…",null,null],[10,"cid","","Returns Actor Cid",10,[[["self"]],["cid"]]],[10,"public_key","","Actor public key, if it exists",10,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"new","","Constructor for actor state",11,[[["biguint"],["codeid"],["cid"],["u64"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"clone","","",12,[[["self"]],["accountactorcode"]]],[11,"clone","","",14,[[["self"]],["crontableentry"]]],[11,"clone","","",15,[[["self"]],["cronactorcode"]]],[11,"clone","","",17,[[["self"]],["rewardactorcode"]]],[11,"clone","","",19,[[["self"]],["storagepoweractorcode"]]],[11,"clone","","",8,[[["self"]],["codeid"]]],[11,"clone","","",20,[[["self"]],["actorid"]]],[11,"clone","","",11,[[["self"]],["actorstate"]]],[11,"default","","",13,[[],["cronactorstate"]]],[11,"default","","",9,[[],["initactorstate"]]],[11,"default","","",20,[[],["actorid"]]],[11,"eq","","",8,[[["codeid"],["self"]],["bool"]]],[11,"ne","","",8,[[["codeid"],["self"]],["bool"]]],[11,"eq","","",20,[[["actorid"],["self"]],["bool"]]],[11,"ne","","",20,[[["actorid"],["self"]],["bool"]]],[11,"eq","","",11,[[["self"],["actorstate"]],["bool"]]],[11,"ne","","",11,[[["self"],["actorstate"]],["bool"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"from_i64","","",3,[[["i64"]],["option"]]],[11,"from_u64","","",3,[[["u64"]],["option"]]],[11,"from_i64","","",4,[[["i64"]],["option"]]],[11,"from_u64","","",4,[[["u64"]],["option"]]],[11,"from_i64","","",5,[[["i64"]],["option"]]],[11,"from_u64","","",5,[[["u64"]],["option"]]],[11,"from_i64","","",6,[[["i64"]],["option"]]],[11,"from_u64","","",6,[[["u64"]],["option"]]],[11,"from_i64","","",7,[[["i64"]],["option"]]],[11,"from_u64","","",7,[[["u64"]],["option"]]],[11,"serialize","","",20,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",20,[[["__d"]],["result"]]],[11,"invoke_method","","",12,[[["methodnum"],["serialized"],["self"],["rt"]],["invocoutput"]]],[11,"invoke_method","","",15,[[["methodnum"],["serialized"],["self"],["rt"]],["invocoutput"]]],[11,"invoke_method","","",16,[[["methodnum"],["serialized"],["self"],["rt"]],["invocoutput"]]],[11,"invoke_method","","",17,[[["methodnum"],["serialized"],["self"],["rt"]],["invocoutput"]]],[11,"invoke_method","","",19,[[["methodnum"],["serialized"],["self"],["rt"]],["invocoutput"]]]],"p":[[3,"AccountActorState"],[3,"Reward"],[3,"RewardActorState"],[4,"AccountMethod"],[4,"CronMethod"],[4,"InitMethod"],[4,"RewardMethod"],[4,"StoragePowerMethod"],[4,"CodeID"],[3,"InitActorState"],[8,"Actor"],[3,"ActorState"],[3,"AccountActorCode"],[3,"CronActorState"],[3,"CronTableEntry"],[3,"CronActorCode"],[3,"InitActorCode"],[3,"RewardActorCode"],[3,"StoragePowerActorState"],[3,"StoragePowerActorCode"],[3,"ActorID"]]};
searchIndex["blockchain"] = {"doc":"","i":[[0,"message_pool","blockchain","",null,null],[3,"MessagePoolConfig","blockchain::message_pool","Holds all configuration options related to nodes message…",null,null],[3,"Pool","","Pool keeps an unordered, de-duplicated set of Messages and…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]]],"p":[[3,"MessagePoolConfig"],[3,"Pool"]]};
searchIndex["chain"] = {"doc":"","i":[[3,"ChainStore","chain","Generic implementation of the datastore trait and structures",null,null],[3,"TipSetMetadata","","TipSetMetadata is the type stored as the value in the…",null,null],[12,"tipset_state_root","","Root of aggregate state after applying tipset",0,null],[12,"tipset_receipts_root","","Receipts from all message contained within this tipset",0,null],[12,"tipset","","The actual Tipset",0,null],[3,"TipIndex","","Tracks tipsets and their states by TipsetKeys and…",null,null],[4,"Error","","",null,null],[13,"UndefinedKey","","Key was not found",1,null],[13,"NoBlocks","","Tipset contains no blocks",1,null],[13,"KeyValueStore","","Error originating from key-value store",1,null],[13,"Blockchain","","Error originating constructing blockchain structures",1,null],[13,"Encoding","","Error originating from encoding arbitrary data",1,null],[13,"Cid","","Error originating from Cid creation",1,null],[11,"new","","constructor",2,[[["path"],["cid"],["tipset"]],[["result",["error"]],["error"]]]],[11,"set_tipset_tracker","","Sets tip_index tracker",2,[[["blockheader"],["self"]],[["result",["error"]],["error"]]]],[11,"weight","","weight",2,[[["self"],["tipset"]],[["error"],["result",["biguint","error"]],["biguint"]]]],[11,"set_genesis","","Writes genesis to blockstore",2,[[["blockheader"],["self"]],[["dberror"],["result",["dberror"]]]]],[11,"persist_headers","","Writes encoded blockheader data to blockstore",2,[[["self"],["tipset"]],[["dberror"],["result",["dberror"]]]]],[11,"put_messages","","Writes encoded message data to blockstore",2,[[["self"]],[["result",["error"]],["error"]]]],[11,"genesis","","Returns genesis blockheader from blockstore",2,[[["self"]],[["error"],["blockheader"],["result",["blockheader","error"]]]]],[11,"heaviest_tipset","","Returns heaviest tipset from blockstore",2,[[["self"]],["tipset"]]],[11,"blockstore","","Returns key-value store instance",2,[[["self"]],["blockstore"]]],[11,"new","","Creates new TipIndex with empty metadata",3,[[],["self"]]],[11,"put","","Adds an entry to TipIndex's metadata After this call the…",3,[[["self"],["tipsetmetadata"]],[["result",["error"]],["error"]]]],[11,"get_tipset","","Returns the tipset corresponding to the hashed index",3,[[["i"],["self"]],[["error"],["result",["tipset","error"]],["tipset"]]]],[11,"get_tipset_state_root","","Returns the state root for the tipset corresponding to the…",3,[[["i"],["self"]],[["result",["cid","error"]],["cid"],["error"]]]],[11,"get_tipset_receipts_root","","Returns the receipt root for the tipset corresponding to…",3,[[["i"],["self"]],[["result",["cid","error"]],["cid"],["error"]]]],[8,"Index","","Trait to allow metadata to be indexed by multiple types of…",null,null],[11,"hash_key","","",4,[[["self"]],["u64"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"clear","","",3,[[["self"]]]],[11,"initialize","","",3,[[]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",1,[[["dberr"]],["error"]]],[11,"from","","",1,[[["blkerr"]],["error"]]],[11,"from","","",1,[[["encerr"]],["error"]]],[11,"from","","",1,[[["serdeerr"]],["error"]]],[11,"from","","",1,[[["ciderr"]],["error"]]],[11,"clone","","",0,[[["self"]],["tipsetmetadata"]]],[11,"default","","",3,[[],["tipindex"]]],[11,"eq","","",1,[[["error"],["self"]],["bool"]]],[11,"ne","","",1,[[["error"],["self"]],["bool"]]],[11,"eq","","",0,[[["self"],["tipsetmetadata"]],["bool"]]],[11,"ne","","",0,[[["self"],["tipsetmetadata"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"deserialize","","",1,[[["__d"]],["result"]]],[11,"hash_key","","",4,[[["self"]],["u64"]]]],"p":[[3,"TipSetMetadata"],[4,"Error"],[3,"ChainStore"],[3,"TipIndex"],[8,"Index"]]};
searchIndex["chain_sync"] = {"doc":"","i":[[3,"BlockMsg","chain_sync","A container used to decode pubsub messages into prior to…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"fmt","","Human-readable string representation of a block msg",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"BlockMsg"]]};
searchIndex["clock"] = {"doc":"","i":[[3,"ChainEpoch","clock","An epoch represents a single valid state in the blockchain",null,null],[3,"ChainEpochClock","","ChainEpochClock is used by the system node to assume weak…",null,null],[11,"new","","Returns a ChainEpochClock based on the given genesis_time…",0,[[["i64"]],["chainepochclock"]]],[11,"get_genesis_time","","Returns the genesis time as a `DateTime<Utc>`",0,[[["self"]],[["datetime",["utc"]],["utc"]]]],[11,"epoch_at_time","","Returns the epoch at a given time",0,[[["datetime"],["self"]],["chainepoch"]]],[11,"new","","Returns ChainEpoch based on the given unix timestamp",1,[[["i64"]],["chainepoch"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["chainepoch"]]],[11,"default","","",1,[[],["chainepoch"]]],[11,"eq","","",1,[[["chainepoch"],["self"]],["bool"]]],[11,"ne","","",1,[[["chainepoch"],["self"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",1,[[["__d"]],["result"]]]],"p":[[3,"ChainEpochClock"],[3,"ChainEpoch"]]};
searchIndex["crypto"] = {"doc":"","i":[[3,"Signature","crypto","A cryptographic signature, represented in bytes, of any…",null,null],[3,"VRFPublicKey","","",null,null],[3,"VRFResult","","The output from running a VRF",null,null],[4,"Error","","",null,null],[13,"SigningError","","Failed to produce a signature",0,null],[13,"InvalidRecovery","","Unable to perform ecrecover with the given params",0,null],[13,"InvalidPubKey","","Provided public key is not understood",0,null],[4,"SignatureType","","",null,null],[13,"Secp256","","",1,null],[13,"BLS","","",1,null],[5,"is_valid_signature","","Checks if a signature is valid given data and address",null,[[["address"],["signature"]],["bool"]]],[11,"new_secp256k1","","Creates a SECP Signature given the raw bytes",2,[[["vec",["u8"]],["u8"]],["self"]]],[11,"new_bls","","Creates a BLS Signature given the raw bytes",2,[[["vec",["u8"]],["u8"]],["self"]]],[11,"new","","",3,[[["vec",["u8"]],["u8"]],["self"]]],[11,"new","","Creates a VRFResult from a raw vector",4,[[["vec",["u8"]],["u8"]],["self"]]],[11,"to_bytes","","Returns clone of underlying vector",4,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"max_value","","Returns max value based on BLS_SIG_LEN",4,[[],["self"]]],[11,"validate_syntax","","Validates syntax...",4,[[["self"]],["bool"]]],[11,"verify","","Asserts whether `input` was used with `pk` to produce this…",4,[[["vrfpublickey"],["vec",["u8"]],["self"],["u8"]],["bool"]]],[17,"BLS_SIG_LEN","","",null,null],[17,"BLS_PUB_LEN","","",null,null],[8,"Signer","","Signer is a trait which allows a key implementation to…",null,null],[10,"sign_bytes","","",5,[[["address"],["vec",["u8"]],["self"],["u8"]],[["result",["signature","box"]],["signature"],["box",["error"]]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["box",["error"]],["error"]],["error"]]],[11,"from","","",0,[[["addresserror"]],["error"]]],[11,"from","","",0,[[["secperror"]],["error"]]],[11,"from","","",0,[[["encodingerror"]],["error"]]],[11,"clone","","",1,[[["self"]],["signaturetype"]]],[11,"clone","","",2,[[["self"]],["signature"]]],[11,"clone","","",4,[[["self"]],["vrfresult"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",2,[[],["signature"]]],[11,"default","","",4,[[],["vrfresult"]]],[11,"cmp","","",4,[[["vrfresult"],["self"]],["ordering"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","","",1,[[["signaturetype"],["self"]],["bool"]]],[11,"eq","","",2,[[["signature"],["self"]],["bool"]]],[11,"ne","","",2,[[["signature"],["self"]],["bool"]]],[11,"eq","","",4,[[["vrfresult"],["self"]],["bool"]]],[11,"ne","","",4,[[["vrfresult"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["vrfresult"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",4,[[["vrfresult"],["self"]],["bool"]]],[11,"le","","",4,[[["vrfresult"],["self"]],["bool"]]],[11,"gt","","",4,[[["vrfresult"],["self"]],["bool"]]],[11,"ge","","",4,[[["vrfresult"],["self"]],["bool"]]],[11,"deref","","",2,[[["self"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"from_i64","","",1,[[["i64"]],["option"]]],[11,"from_u64","","",1,[[["u64"]],["option"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]]],"p":[[4,"Error"],[4,"SignatureType"],[3,"Signature"],[3,"VRFPublicKey"],[3,"VRFResult"],[8,"Signer"]]};
searchIndex["db"] = {"doc":"","i":[[3,"Error","db","",null,null],[3,"MemoryDB","","A thread-safe `HashMap` wrapper.",null,null],[3,"RocksDb","","",null,null],[11,"new","","",0,[[["string"]],["self"]]],[11,"new","","",1,[[["p"]],["self"]]],[11,"open","","",1,[[["self"]],[["error"],["result",["error"]]]]],[11,"db","","",1,[[["self"]],[["result",["db","error"]],["error"],["db"]]]],[8,"DatabaseService","","",null,null],[11,"open","","",2,[[["self"]],[["error"],["result",["error"]]]]],[8,"Write","","",null,null],[10,"write","","",3,[[["v"],["self"],["k"]],[["error"],["result",["error"]]]]],[10,"delete","","",3,[[["self"],["k"]],[["error"],["result",["error"]]]]],[10,"bulk_write","","",3,[[["self"]],[["error"],["result",["error"]]]]],[10,"bulk_delete","","",3,[[["self"]],[["error"],["result",["error"]]]]],[8,"Read","","",null,null],[10,"read","","",4,[[["self"],["k"]],[["error"],["option",["vec"]],["result",["option","error"]]]]],[10,"exists","","",4,[[["self"],["k"]],[["error"],["result",["bool","error"]],["bool"]]]],[10,"bulk_read","","",4,[[["self"]],[["error"],["result",["vec","error"]],["vec",["option"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"open","","",1,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","","",5,[[["v"],["self"],["k"]],[["error"],["result",["error"]]]]],[11,"delete","","",5,[[["self"],["k"]],[["error"],["result",["error"]]]]],[11,"bulk_write","","",5,[[["self"]],[["error"],["result",["error"]]]]],[11,"bulk_delete","","",5,[[["self"]],[["error"],["result",["error"]]]]],[11,"write","","",1,[[["v"],["self"],["k"]],[["error"],["result",["error"]]]]],[11,"delete","","",1,[[["self"],["k"]],[["error"],["result",["error"]]]]],[11,"bulk_write","","",1,[[["self"]],[["error"],["result",["error"]]]]],[11,"bulk_delete","","",1,[[["self"]],[["error"],["result",["error"]]]]],[11,"read","","",5,[[["self"],["k"]],[["error"],["option",["vec"]],["result",["option","error"]]]]],[11,"exists","","",5,[[["self"],["k"]],[["error"],["result",["bool","error"]],["bool"]]]],[11,"bulk_read","","",5,[[["self"]],[["error"],["result",["vec","error"]],["vec",["option"]]]]],[11,"read","","",1,[[["self"],["k"]],[["error"],["option",["vec"]],["result",["option","error"]]]]],[11,"exists","","",1,[[["self"],["k"]],[["error"],["result",["bool","error"]],["bool"]]]],[11,"bulk_read","","",1,[[["self"]],[["error"],["result",["vec","error"]],["vec",["option"]]]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["blkerr"]],["error"]]],[11,"from","","",0,[[["encerr"]],["error"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"default","","",5,[[],["self"]]],[11,"default","","",1,[[],["rocksdb"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Error"],[3,"RocksDb"],[8,"DatabaseService"],[8,"Write"],[8,"Read"],[3,"MemoryDB"]]};
searchIndex["forest_address"] = {"doc":"","i":[[3,"Address","forest_address","Address is the struct that defines the protocol and data…",null,null],[4,"Error","","",null,null],[13,"UnknownNetwork","","",0,null],[13,"UnknownProtocol","","",0,null],[13,"InvalidPayload","","",0,null],[13,"InvalidLength","","",0,null],[13,"InvalidPayloadLength","","",0,null],[13,"InvalidBLSLength","","",0,null],[13,"InvalidChecksum","","",0,null],[13,"Base32Decoding","","",0,null],[4,"Network","","Network defines the preconfigured networks to use with…",null,null],[13,"Mainnet","","",1,null],[13,"Testnet","","",1,null],[4,"Protocol","","Protocol defines the addressing protocol used to derive…",null,null],[13,"ID","","",2,null],[13,"Secp256k1","","",2,null],[13,"Actor","","",2,null],[13,"BLS","","",2,null],[5,"checksum","","Checksum calculates the 4 byte checksum hash",null,[[],[["vec",["u8"]],["u8"]]]],[5,"validate_checksum","","Validates the checksum against the ingest data",null,[[["vec",["u8"]],["u8"]],["bool"]]],[17,"BLS_PUB_LEN","","",null,null],[17,"PAYLOAD_HASH_LEN","","",null,null],[17,"CHECKSUM_HASH_LEN","","",null,null],[11,"from_bytes","","Creates address from encoded bytes",3,[[["vec",["u8"]],["u8"]],[["error"],["result",["error"]]]]],[11,"new_id","","Generates new address using ID protocol",3,[[["u64"]],[["error"],["result",["error"]]]]],[11,"new_secp256k1","","Generates new address using Secp256k1 pubkey",3,[[["vec",["u8"]],["u8"]],[["error"],["result",["error"]]]]],[11,"new_actor","","Generates new address using the Actor protocol",3,[[["vec",["u8"]],["u8"]],[["error"],["result",["error"]]]]],[11,"new_bls","","Generates new address using BLS pubkey",3,[[["vec",["u8"]],["u8"]],[["error"],["result",["error"]]]]],[11,"protocol","","Returns protocol for Address",3,[[["self"]],["protocol"]]],[11,"payload","","Returns data payload of Address",3,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_bytes","","Returns encoded bytes of Address",3,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["decodeerror"]],["error"]]],[11,"from","","",0,[[["parseinterror"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"clone","","",1,[[["self"]],["network"]]],[11,"clone","","",2,[[["self"]],["protocol"]]],[11,"clone","","",3,[[["self"]],["address"]]],[11,"default","","",1,[[],["self"]]],[11,"default","","",2,[[],["self"]]],[11,"default","","",3,[[],["address"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"eq","","",1,[[["self"],["network"]],["bool"]]],[11,"eq","","",2,[[["protocol"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["address"]],["bool"]]],[11,"ne","","",3,[[["self"],["address"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"from_str","","",3,[[["str"]],[["error"],["result",["error"]]]]],[11,"from_i64","","",2,[[["i64"]],["option"]]],[11,"from_u64","","",2,[[["u64"]],["option"]]],[11,"serialize","","",3,[[["s"],["self"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]]],"p":[[4,"Error"],[4,"Network"],[4,"Protocol"],[3,"Address"]]};
searchIndex["forest_blocks"] = {"doc":"","i":[[3,"Block","forest_blocks","A complete block",null,null],[3,"TxMeta","","Tracks the merkleroots of both secp and bls messages…",null,null],[12,"bls_messages","","",0,null],[12,"secp_messages","","",0,null],[3,"BlockHeader","","Header of a block",null,null],[3,"BlockHeaderBuilder","","Builder for `BlockHeader`.",null,null],[3,"Ticket","","A Ticket is a marker of a tick of the blockchain's clock.…",null,null],[12,"vrfproof","","A proof output by running a VRF on the VDFResult of the…",1,null],[3,"EPostTicket","","PoSt election candidates",null,null],[3,"EPostProof","","Proof of Spacetime election proof",null,null],[3,"TipSetKeys","","A set of CIDs forming a unique key for a TipSet. Equal…",null,null],[12,"cids","","",2,null],[3,"Tipset","","An immutable set of blocks at the same height with the…",null,null],[3,"FullTipset","","FullTipSet is an expanded version of the TipSet that…",null,null],[4,"Error","","",null,null],[13,"InvalidTipSet","","Tipset contains invalid data, as described by the string…",3,null],[13,"NoBlocks","","The given tipset has no blocks",3,null],[11,"to_header","","Returns reference to BlockHeader",4,[[["self"]],["blockheader"]]],[11,"bls_msgs","","",4,[[["self"]],["vec"]]],[11,"secp_msgs","","",4,[[["self"]],["vec"]]],[11,"parents","","Parents is the set of parents this block was based on.…",5,[[["self"],["tipsetkeys"]],["self"]]],[11,"weight","","weight is the aggregate chain weight of the parent set",5,[[["self"],["biguint"]],["self"]]],[11,"epoch","","epoch is the period in which a new block is generated.…",5,[[["self"],["chainepoch"]],["self"]]],[11,"miner_address","","miner_address is the address of the miner actor that mined…",5,[[["self"],["address"]],["self"]]],[11,"messages","","messages contains the merkle links for bls_messages and…",5,[[["self"],["txmeta"]],["self"]]],[11,"message_receipts","","message_receipts is the Cid of the root of an array of…",5,[[["self"],["cid"]],["self"]]],[11,"state_root","","state_root is a cid pointer to the state tree after…",5,[[["self"],["cid"]],["self"]]],[11,"fork_signal","","",5,[[["self"],["u64"]],["self"]]],[11,"signature","","",5,[[["signature"],["self"]],["self"]]],[11,"epost_verify","","",5,[[["self"],["epostproof"]],["self"]]],[11,"timestamp","","timestamp, in seconds since the Unix epoch, at which this…",5,[[["self"],["u64"]],["self"]]],[11,"ticket","","the ticket submitted with this block",5,[[["self"],["ticket"]],["self"]]],[11,"bls_aggregate","","aggregate signature of miner in block",5,[[["signature"],["self"]],["self"]]],[11,"cached_cid","","stores the cid for the block after the first call to `cid()`",5,[[["self"],["cid"]],["self"]]],[11,"cached_bytes","","stores the hashed bytes of the block after the fist call…",5,[[["self"],["vec",["u8"]],["u8"]],["self"]]],[11,"build","","Builds a new `BlockHeader`.",5,[[["self"]],[["result",["blockheader","string"]],["string"],["blockheader"]]]],[11,"builder","","Generates a BlockHeader builder as a constructor",6,[[],["blockheaderbuilder"]]],[11,"parents","","Getter for BlockHeader parents",6,[[["self"]],["tipsetkeys"]]],[11,"weight","","Getter for BlockHeader weight",6,[[["self"]],["biguint"]]],[11,"epoch","","Getter for BlockHeader epoch",6,[[["self"]],["chainepoch"]]],[11,"miner_address","","Getter for BlockHeader miner_address",6,[[["self"]],["address"]]],[11,"messages","","Getter for BlockHeader messages",6,[[["self"]],["txmeta"]]],[11,"message_receipts","","Getter for BlockHeader message_receipts",6,[[["self"]],["cid"]]],[11,"state_root","","Getter for BlockHeader state_root",6,[[["self"]],["cid"]]],[11,"timestamp","","Getter for BlockHeader timestamp",6,[[["self"]],["u64"]]],[11,"ticket","","Getter for BlockHeader ticket",6,[[["self"]],["ticket"]]],[11,"bls_aggregate","","Getter for BlockHeader bls_aggregate",6,[[["self"]],["signature"]]],[11,"cid","","Getter for BlockHeader cid",6,[[["self"]],["cid"]]],[11,"fork_signal","","Getter for BlockHeader fork_signal",6,[[["self"]],["u64"]]],[11,"epost_verify","","Getter for BlockHeader epost_verify",6,[[["self"]],["epostproof"]]],[11,"signature","","Getter for BlockHeader signature",6,[[["self"]],["signature"]]],[11,"build_and_validate","","",5,[[["self"]],[["blockheader"],["string"],["result",["blockheader","string"]]]]],[11,"new","","Ticket constructor",1,[[["vrfresult"]],["self"]]],[11,"new","","Builds a new TipSet from a collection of blocks. A valid…",7,[[["vec",["blockheader"]],["blockheader"]],[["error"],["result",["error"]]]]],[11,"blocks","","Returns all blocks in tipset",7,[[["self"]],["vec"]]],[11,"is_empty","","Returns true if no blocks present in tipset",7,[[["self"]],["bool"]]],[11,"key","","Returns a key for the tipset.",7,[[["self"]],["tipsetkeys"]]],[11,"parents","","Returns the CIDs of the parents of the blocks in the tipset",7,[[["self"]],["tipsetkeys"]]],[11,"weight","","Returns the tipset's calculated weight",7,[[["self"]],["biguint"]]],[11,"tip_epoch","","Returns the tipset's epoch",7,[[["self"]],["chainepoch"]]],[11,"new","","constructor",8,[[["block"],["vec",["block"]]],["self"]]],[11,"blocks","","Returns all blocks in a full tipset",8,[[["self"]],["vec"]]],[11,"tipset","","Returns a Tipset",8,[[["self"]],[["result",["tipset","error"]],["error"],["tipset"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"clone","","",4,[[["self"]],["block"]]],[11,"clone","","",0,[[["self"]],["txmeta"]]],[11,"clone","","",6,[[["self"]],["blockheader"]]],[11,"clone","","",5,[[["self"]],["blockheaderbuilder"]]],[11,"clone","","",1,[[["self"]],["ticket"]]],[11,"clone","","",9,[[["self"]],["epostticket"]]],[11,"clone","","",10,[[["self"]],["epostproof"]]],[11,"clone","","",2,[[["self"]],["tipsetkeys"]]],[11,"clone","","",7,[[["self"]],["tipset"]]],[11,"default","","",0,[[],["txmeta"]]],[11,"default","","",5,[[],["blockheaderbuilder"]]],[11,"default","","",1,[[],["ticket"]]],[11,"default","","",9,[[],["epostticket"]]],[11,"default","","",10,[[],["epostproof"]]],[11,"default","","",2,[[],["tipsetkeys"]]],[11,"default","","",7,[[],["tipset"]]],[11,"eq","","",4,[[["self"],["block"]],["bool"]]],[11,"ne","","",4,[[["self"],["block"]],["bool"]]],[11,"eq","","",0,[[["txmeta"],["self"]],["bool"]]],[11,"ne","","",0,[[["txmeta"],["self"]],["bool"]]],[11,"eq","","",3,[[["error"],["self"]],["bool"]]],[11,"ne","","",3,[[["error"],["self"]],["bool"]]],[11,"eq","","",6,[[["blockheader"],["self"]],["bool"]]],[11,"ne","","",6,[[["blockheader"],["self"]],["bool"]]],[11,"eq","","",1,[[["ticket"],["self"]],["bool"]]],[11,"ne","","",1,[[["ticket"],["self"]],["bool"]]],[11,"eq","","",9,[[["self"],["epostticket"]],["bool"]]],[11,"ne","","",9,[[["self"],["epostticket"]],["bool"]]],[11,"eq","","",10,[[["epostproof"],["self"]],["bool"]]],[11,"ne","","",10,[[["epostproof"],["self"]],["bool"]]],[11,"eq","","",2,[[["tipsetkeys"],["self"]],["bool"]]],[11,"ne","","",2,[[["tipsetkeys"],["self"]],["bool"]]],[11,"eq","","",7,[[["tipset"],["self"]],["bool"]]],[11,"ne","","",7,[[["tipset"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["ticket"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["ticket"],["self"]],["bool"]]],[11,"le","","",1,[[["ticket"],["self"]],["bool"]]],[11,"gt","","",1,[[["ticket"],["self"]],["bool"]]],[11,"ge","","",1,[[["ticket"],["self"]],["bool"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"serialize","","",9,[[["s"],["self"]],["result"]]],[11,"serialize","","",10,[[["s"],["self"]],["result"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]],[11,"deserialize","","",9,[[["d"]],["result"]]],[11,"deserialize","","",10,[[["d"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]],[11,"raw_data","","returns the block raw contents as a byte array",6,[[["self"]],[["result",["vec","encodingerror"]],["vec",["u8"]],["encodingerror"]]]],[11,"cid","","returns the content identifier of the block",6,[[["self"]],[["result",["cid","ciderror"]],["cid"],["ciderror"]]]]],"p":[[3,"TxMeta"],[3,"Ticket"],[3,"TipSetKeys"],[4,"Error"],[3,"Block"],[3,"BlockHeaderBuilder"],[3,"BlockHeader"],[3,"Tipset"],[3,"FullTipset"],[3,"EPostTicket"],[3,"EPostProof"]]};
searchIndex["forest_cid"] = {"doc":"","i":[[3,"Prefix","forest_cid","Prefix represents all metadata of a CID, without the…",null,null],[12,"version","","",0,null],[12,"codec","","",0,null],[12,"mh_type","","",0,null],[12,"mh_len","","",0,null],[3,"Cid","","Representation of a IPLD CID.",null,null],[12,"version","","",1,null],[12,"codec","","",1,null],[12,"hash","","",1,null],[4,"Codec","","",null,null],[13,"Raw","","",2,null],[13,"DagProtobuf","","",2,null],[13,"DagCBOR","","",2,null],[13,"GitRaw","","",2,null],[13,"EthereumBlock","","",2,null],[13,"EthereumBlockList","","",2,null],[13,"EthereumTxTrie","","",2,null],[13,"EthereumTx","","",2,null],[13,"EthereumTxReceiptTrie","","",2,null],[13,"EthereumTxReceipt","","",2,null],[13,"EthereumStateTrie","","",2,null],[13,"EthereumAccountSnapshot","","",2,null],[13,"EthereumStorageTrie","","",2,null],[13,"BitcoinBlock","","",2,null],[13,"BitcoinTx","","",2,null],[13,"ZcashBlock","","",2,null],[13,"ZcashTx","","",2,null],[13,"DagJSON","","",2,null],[4,"Error","","Error types",null,null],[13,"UnknownCodec","","",3,null],[13,"InputTooShort","","",3,null],[13,"ParsingError","","",3,null],[13,"InvalidCidVersion","","",3,null],[13,"Other","","",3,null],[4,"Version","","Cid protocol version",null,null],[13,"V0","","",4,null],[13,"V1","","",4,null],[11,"from","","Convert a number to the matching codec",2,[[["u64"]],[["error"],["result",["codec","error"]],["codec"]]]],[11,"from","","Generates version from integer value",4,[[["u64"]],[["result",["version","error"]],["version"],["error"]]]],[11,"is_v0_str","","Returns true if string is version 0",4,[[["str"]],["bool"]]],[11,"is_v0_binary","","Returns true if bytes is version 0",4,[[],["bool"]]],[11,"new","","Create a new CID.",1,[[["version"],["multihash"],["codec"]],["cid"]]],[11,"from_bytes_default","","Constructs a cid with bytes using default version and codec",1,[[],[["result",["error"]],["error"]]]],[11,"from_cbor_default","","Constructs a cid with a CBOR encodable structure",1,[[["cbor"]],[["result",["error"]],["error"]]]],[11,"from_raw_cid","","Create a new CID from raw data (binary or multibase…",1,[[["cid"],["tryinto",["cid"]]],[["cid"],["result",["cid"]]]]],[11,"new_from_prefix","","Create a new CID from a prefix and some data.",1,[[["prefix"]],[["result",["cid","error"]],["cid"],["error"]]]],[11,"to_bytes","","Returns encoded bytes of a cid",1,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"prefix","","Returns prefix for Cid format",1,[[["self"]],["prefix"]]],[11,"key","","Returns cid in bytes to be stored in datastore",1,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"new_from_bytes","","Generate new prefix from encoded bytes",0,[[],[["result",["prefix","error"]],["error"],["prefix"]]]],[11,"as_bytes","","Encodes prefix to bytes",0,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",3,[[["error"]],["error"]]],[11,"from","","",3,[[["error"]],["error"]]],[11,"from","","",3,[[["decodeownederror"]],["error"]]],[11,"from","","",3,[[["encodeerror"]],["error"]]],[11,"from","","",3,[[["decodeerror"]],["error"]]],[11,"from","","",3,[[["encodingerror"]],["error"]]],[11,"clone","","",2,[[["self"]],["codec"]]],[11,"clone","","",3,[[["self"]],["error"]]],[11,"clone","","",4,[[["self"]],["version"]]],[11,"clone","","",0,[[["self"]],["prefix"]]],[11,"clone","","",1,[[["self"]],["cid"]]],[11,"default","","",1,[[],["self"]]],[11,"eq","","",2,[[["self"],["codec"]],["bool"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"ne","","",3,[[["self"],["error"]],["bool"]]],[11,"eq","","",4,[[["version"],["self"]],["bool"]]],[11,"eq","","",0,[[["prefix"],["self"]],["bool"]]],[11,"ne","","",0,[[["prefix"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"]],["bool"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"try_from","","",1,[[["string"]],["result"]]],[11,"try_from","","",1,[[["str"]],["result"]]],[11,"try_from","","",1,[[["vec",["u8"]],["u8"]],["result"]]],[11,"try_from","","",1,[[],["result"]]],[11,"from_str","","",1,[[["str"]],[["result",["error"]],["error"]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"serialize","","",1,[[["s"],["self"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result"]]]],"p":[[3,"Prefix"],[3,"Cid"],[4,"Codec"],[4,"Error"],[4,"Version"]]};
searchIndex["forest_encoding"] = {"doc":"","i":[[0,"de","forest_encoding","Generic data structure deserialization framework.",null,null],[0,"value","forest_encoding::de","Building blocks for deserializing basic values using the…",null,null],[3,"Error","forest_encoding::de::value","A minimal representation of all possible errors that can…",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"I128Deserializer","","A deserializer holding an `i128`.",null,null],[3,"U128Deserializer","","A deserializer holding a `u128`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to…",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to…",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[8,"Error","forest_encoding::de","The `Error` trait allows `Deserialize` implementations to…",null,null],[10,"custom","","Raised when there is general error when deserializing a…",0,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from…",0,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right…",0,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input…",0,[[["expected"],["usize"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant…",0,[[["str"]],["self"]]],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field…",0,[[["str"]],["self"]]],[11,"missing_field","","Raised when a `Deserialize` struct type expected to…",0,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than…",0,[[["str"]],["self"]]],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any…",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",1,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32`…",1,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or…",1,null],[13,"Float","","The input contained a floating point `f32` or `f64` that…",1,null],[13,"Char","","The input contained a `char` that was not expected.",1,null],[13,"Str","","The input contained a `&str` or `String` that was not…",1,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not…",1,null],[13,"Unit","","The input contained a unit `()` that was not expected.",1,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",1,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",1,null],[13,"Seq","","The input contained a sequence that was not expected.",1,null],[13,"Map","","The input contained a map that was not expected.",1,null],[13,"Enum","","The input contained an enum that was not expected.",1,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",1,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",1,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",1,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",1,null],[13,"Other","","A message stating what uncategorized thing the input…",1,null],[8,"Expected","","`Expected` represents an explanation of what data a…",null,null],[10,"fmt","","Format an explanation of what data was being expected.…",2,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[8,"Deserialize","","A data structure that can be deserialized from any data…",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",3,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without…",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the…",null,null],[16,"Value","","The type produced by using this seed.",4,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize`…",4,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",5,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the…",5,[[["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool`…",5,[[["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",5,[[["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16`…",5,[[["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32`…",5,[[["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64`…",5,[[["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128`…",5,[[["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",5,[[["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",5,[[["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",5,[[["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",5,[[["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128`…",5,[[["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",5,[[["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",5,[[["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char`…",5,[[["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string…",5,[[["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string…",5,[[["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array…",5,[[["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array…",5,[[["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional…",5,[[["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",5,[[["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit…",5,[[["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype…",5,[[["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence…",5,[[["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence…",5,[[["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple…",5,[[["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of…",5,[[["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct…",5,[[["str"],["v"]],["result"]]],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum…",5,[[["str"],["v"]],["result"]]],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of…",5,[[["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a…",5,[[["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should…",5,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a…",null,null],[16,"Value","","The value produced by this visitor.",6,null],[10,"expecting","","Format a message stating what data this Visitor expects to…",6,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"visit_bool","","The input contains a boolean.",6,[[["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",6,[[["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",6,[[["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",6,[[["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",6,[[["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",6,[[["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",6,[[["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",6,[[["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",6,[[["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",6,[[["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",6,[[["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",6,[[["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",6,[[["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",6,[[["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is…",6,[[["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as…",6,[[["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is…",6,[[["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte…",6,[[],["result"]]],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as…",6,[[],["result"]]],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte…",6,[[["vec",["u8"]],["u8"]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",6,[[],["result"]]],[11,"visit_some","","The input contains an optional that is present.",6,[[["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",6,[[],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",6,[[["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",6,[[["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",6,[[["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",6,[[["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",7,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the…",7,[[["self"],["t"]],[["option"],["result",["option"]]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the…",7,[[["self"]],[["result",["option"]],["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence,…",7,[[["self"]],[["option",["usize"]],["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",8,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map,…",8,[[["self"],["k"]],[["result",["option"]],["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",8,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next…",8,[[["self"],["k"],["v"]],[["option"],["result",["option"]]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map,…",8,[[["self"]],[["result",["option"]],["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",8,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next…",8,[[["self"]],[["result",["option"]],["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if…",8,[[["self"]],[["option",["usize"]],["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",9,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content…",9,null],[10,"variant_seed","","`variant` is called to identify which variant to…",9,[[["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to…",9,[[],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the…",null,null],[16,"Error","","The error type that can be returned if some error occurs…",10,null],[10,"unit_variant","","Called when deserializing a variant with no values.",10,[[],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",10,[[["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",10,[[],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",10,[[["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",10,[[["v"]],["result"]]],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from…",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",11,null],[10,"into_deserializer","","Convert this value into a deserializer.",11,[[]]],[3,"IgnoredAny","","An efficient way of discarding data from a deserializer.",null,null],[8,"StdError","","`Error` is a trait representing the basic expectations for…",null,null],[11,"source","","The lower-level source of this error, if any.",12,[[["self"]],[["option",["error"]],["error"]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this…",12,[[["self"]],[["option",["backtrace"]],["backtrace"]]]],[11,"description","","`if let Err(e) = \"xc\".parse::<u32>() { // Print `e`…",12,[[["self"]],["str"]]],[11,"cause","","",12,[[["self"]],[["option",["error"]],["error"]]]],[0,"ser","forest_encoding","Generic data structure serialization framework.",null,null],[8,"Error","forest_encoding::ser","Trait used by `Serialize` implementations to generically…",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any…",13,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data…",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",14,[[["s"],["self"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure…",null,null],[16,"Ok","","The output type produced by this `Serializer` during…",15,null],[16,"Error","","The error type when some error occurs during serialization.",15,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the…",15,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the…",15,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for…",15,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for…",15,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the…",15,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing…",15,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for…",15,null],[10,"serialize_bool","","Serialize a `bool` value.",15,[[["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",15,[[["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",15,[[["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",15,[[["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",15,[[["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",15,[[["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",15,[[["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",15,[[["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",15,[[["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",15,[[["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",15,[[["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",15,[[["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",15,[[["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",15,[[["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",15,[[["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",15,[[],["result"]]],[10,"serialize_none","","Serialize a [`None`] value.",15,[[],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",15,[[["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",15,[[],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or…",15,[[["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",15,[[["str"],["u32"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",15,[[["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8)…",15,[[["str"],["u32"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call…",15,[[["option",["usize"]],["usize"]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose…",15,[[["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8,…",15,[[["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E…",15,[[["str"],["u32"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by…",15,[[["option",["usize"]],["usize"]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g:…",15,[[["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E…",15,[[["str"],["u32"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",15,[[["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",15,[[["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of…",15,[[["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should…",15,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",16,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",16,null],[10,"serialize_element","","Serialize a sequence element.",16,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",16,[[],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",17,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",17,null],[10,"serialize_element","","Serialize a tuple element.",17,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",17,[[],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",18,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",18,null],[10,"serialize_field","","Serialize a tuple struct field.",18,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",18,[[],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",19,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",19,null],[10,"serialize_field","","Serialize a tuple variant field.",19,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",19,[[],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",20,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",20,null],[10,"serialize_key","","Serialize a map key.",20,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",20,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",20,[[["k"],["self"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",20,[[],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",21,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",21,null],[10,"serialize_field","","Serialize a struct field.",21,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",21,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",21,[[],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",22,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",22,null],[10,"serialize_field","","Serialize a struct variant field.",22,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",22,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",22,[[],["result"]]],[3,"Impossible","","Helper type for implementing a `Serializer` that does not…",null,null],[8,"StdError","","`Error` is a trait representing the basic expectations for…",null,null],[11,"source","","The lower-level source of this error, if any.",12,[[["self"]],[["option",["error"]],["error"]]]],[11,"backtrace","","Returns a stack backtrace, if available, of where this…",12,[[["self"]],[["option",["backtrace"]],["backtrace"]]]],[11,"description","","`if let Err(e) = \"xc\".parse::<u32>() { // Print `e`…",12,[[["self"]],["str"]]],[11,"cause","","",12,[[["self"]],[["option",["error"]],["error"]]]],[0,"error","forest_encoding","When serializing or deserializing CBOR goes wrong.",null,null],[3,"Error","forest_encoding::error","This type represents all possible errors that can occur…",null,null],[6,"Result","","Alias for a `Result` with the error type…",null,null],[4,"Category","","Categorizes the cause of a `serde_cbor::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes…",23,null],[13,"Syntax","","The error was caused by input that was not syntactically…",23,null],[13,"Data","","The error was caused by input data that was semantically…",23,null],[13,"Eof","","The error was caused by prematurely reaching the end of…",23,null],[5,"from_reader","forest_encoding","Decodes a value from CBOR data in a reader.",null,[[["r"]],[["error"],["result",["error"]]]]],[5,"from_slice","","Decodes a value from CBOR data in a slice.",null,[[],[["error"],["result",["error"]]]]],[0,"tags","","Support for cbor tags",null,null],[3,"Tagged","forest_encoding::tags","A value that is optionally tagged with a cbor tag",null,null],[12,"tag","","cbor tag",24,null],[12,"value","","value",24,null],[5,"current_cbor_tag","","function to get the current cbor tag",null,[[],[["option",["u64"]],["u64"]]]],[5,"to_vec","forest_encoding","Serializes a value to a vector.",null,[[["t"]],[["error"],["result",["vec","error"]],["vec",["u8"]]]]],[5,"to_writer","","Serializes a value to a writer.",null,[[["w"],["t"]],[["result",["error"]],["error"]]]],[4,"Error","","Error type for encoding and decoding data through any…",null,null],[13,"Unmarshalling","","",25,null],[12,"description","forest_encoding::Error","",25,null],[12,"protocol","","",25,null],[13,"Marshalling","forest_encoding","",25,null],[12,"description","forest_encoding::Error","",25,null],[12,"protocol","","",25,null],[4,"CodecProtocol","forest_encoding","CodecProtocol defines the protocol in which the data is…",null,null],[13,"Cbor","","",26,null],[5,"blake2b_variable","","Generates blake2b hash with provided size.",null,[[["usize"]],[["vec",["u8"]],["u8"]]]],[5,"blake2b_256","","Generates blake2b hash of fixed 32 bytes size.",null,[[]]],[8,"Cbor","","Implemented for types that are CBOR encodable",null,null],[11,"marshal_cbor","","",27,[[["self"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]],[11,"from","forest_encoding::de::value","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"to_string","","",28,[[["self"]],["string"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,[[["self"],["t"]]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,[[["self"],["t"]]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"to_owned","","",54,[[["self"]],["t"]]],[11,"clone_into","","",54,[[["self"],["t"]]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","forest_encoding::de","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"fmt","","",55,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"from","forest_encoding::ser","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","forest_encoding::error","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","forest_encoding::tags","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","forest_encoding","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_string","","",25,[[["self"]],["string"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_string","","",26,[[["self"]],["string"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"deserialize","forest_encoding::tags","",24,[[["d"]],[["result",["tagged"]],["tagged"]]]],[11,"custom","forest_encoding::error","",57,[[["t"]],["error"]]],[11,"source","","",57,[[["self"]],[["option",["error"]],["error"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"custom","","",57,[[["t"]],["error"]]],[11,"invalid_type","","",57,[[["unexpected"],["expected"]],["error"]]],[11,"serialize","forest_encoding::tags","",24,[[["s"],["self"]],["result"]]],[11,"eq","forest_encoding::error","",23,[[["category"],["self"]],["bool"]]],[11,"clone","","",23,[[["self"]],["category"]]],[11,"fmt","","",57,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"from","","",57,[[["error"]],["error"]]],[11,"deserialize_any","forest_encoding::de::value","",53,[[["v"]],["result"]]],[11,"deserialize_seq","","",53,[[["v"]],["result"]]],[11,"deserialize_tuple","","",53,[[["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",53,[[["v"]],["result"]]],[11,"deserialize_i8","","",53,[[["v"]],["result"]]],[11,"deserialize_i16","","",53,[[["v"]],["result"]]],[11,"deserialize_i32","","",53,[[["v"]],["result"]]],[11,"deserialize_i64","","",53,[[["v"]],["result"]]],[11,"deserialize_i128","","",53,[[["v"]],["result"]]],[11,"deserialize_u8","","",53,[[["v"]],["result"]]],[11,"deserialize_u16","","",53,[[["v"]],["result"]]],[11,"deserialize_u32","","",53,[[["v"]],["result"]]],[11,"deserialize_u64","","",53,[[["v"]],["result"]]],[11,"deserialize_u128","","",53,[[["v"]],["result"]]],[11,"deserialize_f32","","",53,[[["v"]],["result"]]],[11,"deserialize_f64","","",53,[[["v"]],["result"]]],[11,"deserialize_char","","",53,[[["v"]],["result"]]],[11,"deserialize_str","","",53,[[["v"]],["result"]]],[11,"deserialize_string","","",53,[[["v"]],["result"]]],[11,"deserialize_bytes","","",53,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",53,[[["v"]],["result"]]],[11,"deserialize_option","","",53,[[["v"]],["result"]]],[11,"deserialize_unit","","",53,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",53,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",53,[[["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",53,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",53,[[["v"]],["result"]]],[11,"deserialize_struct","","",53,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",53,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",53,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",53,[[["v"]],["result"]]],[11,"deserialize_any","","",49,[[["v"]],["result"]]],[11,"deserialize_enum","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",49,[[["v"]],["result"]]],[11,"deserialize_i8","","",49,[[["v"]],["result"]]],[11,"deserialize_i16","","",49,[[["v"]],["result"]]],[11,"deserialize_i32","","",49,[[["v"]],["result"]]],[11,"deserialize_i64","","",49,[[["v"]],["result"]]],[11,"deserialize_i128","","",49,[[["v"]],["result"]]],[11,"deserialize_u8","","",49,[[["v"]],["result"]]],[11,"deserialize_u16","","",49,[[["v"]],["result"]]],[11,"deserialize_u32","","",49,[[["v"]],["result"]]],[11,"deserialize_u64","","",49,[[["v"]],["result"]]],[11,"deserialize_u128","","",49,[[["v"]],["result"]]],[11,"deserialize_f32","","",49,[[["v"]],["result"]]],[11,"deserialize_f64","","",49,[[["v"]],["result"]]],[11,"deserialize_char","","",49,[[["v"]],["result"]]],[11,"deserialize_str","","",49,[[["v"]],["result"]]],[11,"deserialize_string","","",49,[[["v"]],["result"]]],[11,"deserialize_bytes","","",49,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",49,[[["v"]],["result"]]],[11,"deserialize_option","","",49,[[["v"]],["result"]]],[11,"deserialize_unit","","",49,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",49,[[["v"]],["result"]]],[11,"deserialize_tuple","","",49,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",49,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",49,[[["v"]],["result"]]],[11,"deserialize_struct","","",49,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",49,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",49,[[["v"]],["result"]]],[11,"deserialize_any","","",48,[[["v"]],["result"]]],[11,"deserialize_enum","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",48,[[["v"]],["result"]]],[11,"deserialize_i8","","",48,[[["v"]],["result"]]],[11,"deserialize_i16","","",48,[[["v"]],["result"]]],[11,"deserialize_i32","","",48,[[["v"]],["result"]]],[11,"deserialize_i64","","",48,[[["v"]],["result"]]],[11,"deserialize_i128","","",48,[[["v"]],["result"]]],[11,"deserialize_u8","","",48,[[["v"]],["result"]]],[11,"deserialize_u16","","",48,[[["v"]],["result"]]],[11,"deserialize_u32","","",48,[[["v"]],["result"]]],[11,"deserialize_u64","","",48,[[["v"]],["result"]]],[11,"deserialize_u128","","",48,[[["v"]],["result"]]],[11,"deserialize_f32","","",48,[[["v"]],["result"]]],[11,"deserialize_f64","","",48,[[["v"]],["result"]]],[11,"deserialize_char","","",48,[[["v"]],["result"]]],[11,"deserialize_str","","",48,[[["v"]],["result"]]],[11,"deserialize_string","","",48,[[["v"]],["result"]]],[11,"deserialize_bytes","","",48,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",48,[[["v"]],["result"]]],[11,"deserialize_option","","",48,[[["v"]],["result"]]],[11,"deserialize_unit","","",48,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",48,[[["v"]],["result"]]],[11,"deserialize_tuple","","",48,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",48,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",48,[[["v"]],["result"]]],[11,"deserialize_struct","","",48,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",48,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",48,[[["v"]],["result"]]],[11,"deserialize_bool","","",32,[[["v"]],["result"]]],[11,"deserialize_i8","","",32,[[["v"]],["result"]]],[11,"deserialize_i16","","",32,[[["v"]],["result"]]],[11,"deserialize_i32","","",32,[[["v"]],["result"]]],[11,"deserialize_i64","","",32,[[["v"]],["result"]]],[11,"deserialize_i128","","",32,[[["v"]],["result"]]],[11,"deserialize_u8","","",32,[[["v"]],["result"]]],[11,"deserialize_u16","","",32,[[["v"]],["result"]]],[11,"deserialize_u32","","",32,[[["v"]],["result"]]],[11,"deserialize_u64","","",32,[[["v"]],["result"]]],[11,"deserialize_u128","","",32,[[["v"]],["result"]]],[11,"deserialize_f32","","",32,[[["v"]],["result"]]],[11,"deserialize_f64","","",32,[[["v"]],["result"]]],[11,"deserialize_char","","",32,[[["v"]],["result"]]],[11,"deserialize_str","","",32,[[["v"]],["result"]]],[11,"deserialize_string","","",32,[[["v"]],["result"]]],[11,"deserialize_bytes","","",32,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",32,[[["v"]],["result"]]],[11,"deserialize_option","","",32,[[["v"]],["result"]]],[11,"deserialize_unit","","",32,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",32,[[["v"]],["result"]]],[11,"deserialize_tuple","","",32,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",32,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",32,[[["v"]],["result"]]],[11,"deserialize_struct","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",32,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",32,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",32,[[["v"]],["result"]]],[11,"deserialize_any","","",32,[[["v"]],["result"]]],[11,"deserialize_bool","","",37,[[["v"]],["result"]]],[11,"deserialize_i8","","",37,[[["v"]],["result"]]],[11,"deserialize_i16","","",37,[[["v"]],["result"]]],[11,"deserialize_i32","","",37,[[["v"]],["result"]]],[11,"deserialize_i64","","",37,[[["v"]],["result"]]],[11,"deserialize_i128","","",37,[[["v"]],["result"]]],[11,"deserialize_u8","","",37,[[["v"]],["result"]]],[11,"deserialize_u16","","",37,[[["v"]],["result"]]],[11,"deserialize_u32","","",37,[[["v"]],["result"]]],[11,"deserialize_u64","","",37,[[["v"]],["result"]]],[11,"deserialize_u128","","",37,[[["v"]],["result"]]],[11,"deserialize_f32","","",37,[[["v"]],["result"]]],[11,"deserialize_f64","","",37,[[["v"]],["result"]]],[11,"deserialize_char","","",37,[[["v"]],["result"]]],[11,"deserialize_str","","",37,[[["v"]],["result"]]],[11,"deserialize_string","","",37,[[["v"]],["result"]]],[11,"deserialize_bytes","","",37,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",37,[[["v"]],["result"]]],[11,"deserialize_option","","",37,[[["v"]],["result"]]],[11,"deserialize_unit","","",37,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",37,[[["v"]],["result"]]],[11,"deserialize_tuple","","",37,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",37,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",37,[[["v"]],["result"]]],[11,"deserialize_struct","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",37,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",37,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",37,[[["v"]],["result"]]],[11,"deserialize_any","","",37,[[["v"]],["result"]]],[11,"deserialize_bool","","",38,[[["v"]],["result"]]],[11,"deserialize_i8","","",38,[[["v"]],["result"]]],[11,"deserialize_i16","","",38,[[["v"]],["result"]]],[11,"deserialize_i32","","",38,[[["v"]],["result"]]],[11,"deserialize_i64","","",38,[[["v"]],["result"]]],[11,"deserialize_i128","","",38,[[["v"]],["result"]]],[11,"deserialize_u8","","",38,[[["v"]],["result"]]],[11,"deserialize_u16","","",38,[[["v"]],["result"]]],[11,"deserialize_u32","","",38,[[["v"]],["result"]]],[11,"deserialize_u64","","",38,[[["v"]],["result"]]],[11,"deserialize_u128","","",38,[[["v"]],["result"]]],[11,"deserialize_f32","","",38,[[["v"]],["result"]]],[11,"deserialize_f64","","",38,[[["v"]],["result"]]],[11,"deserialize_char","","",38,[[["v"]],["result"]]],[11,"deserialize_str","","",38,[[["v"]],["result"]]],[11,"deserialize_string","","",38,[[["v"]],["result"]]],[11,"deserialize_bytes","","",38,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",38,[[["v"]],["result"]]],[11,"deserialize_option","","",38,[[["v"]],["result"]]],[11,"deserialize_unit","","",38,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",38,[[["v"]],["result"]]],[11,"deserialize_tuple","","",38,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",38,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",38,[[["v"]],["result"]]],[11,"deserialize_struct","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",38,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",38,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",38,[[["v"]],["result"]]],[11,"deserialize_any","","",38,[[["v"]],["result"]]],[11,"deserialize_bool","","",41,[[["v"]],["result"]]],[11,"deserialize_i8","","",41,[[["v"]],["result"]]],[11,"deserialize_i16","","",41,[[["v"]],["result"]]],[11,"deserialize_i32","","",41,[[["v"]],["result"]]],[11,"deserialize_i64","","",41,[[["v"]],["result"]]],[11,"deserialize_i128","","",41,[[["v"]],["result"]]],[11,"deserialize_u8","","",41,[[["v"]],["result"]]],[11,"deserialize_u16","","",41,[[["v"]],["result"]]],[11,"deserialize_u32","","",41,[[["v"]],["result"]]],[11,"deserialize_u64","","",41,[[["v"]],["result"]]],[11,"deserialize_u128","","",41,[[["v"]],["result"]]],[11,"deserialize_f32","","",41,[[["v"]],["result"]]],[11,"deserialize_f64","","",41,[[["v"]],["result"]]],[11,"deserialize_char","","",41,[[["v"]],["result"]]],[11,"deserialize_str","","",41,[[["v"]],["result"]]],[11,"deserialize_string","","",41,[[["v"]],["result"]]],[11,"deserialize_bytes","","",41,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",41,[[["v"]],["result"]]],[11,"deserialize_option","","",41,[[["v"]],["result"]]],[11,"deserialize_unit","","",41,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",41,[[["v"]],["result"]]],[11,"deserialize_tuple","","",41,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",41,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",41,[[["v"]],["result"]]],[11,"deserialize_struct","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",41,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",41,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",41,[[["v"]],["result"]]],[11,"deserialize_any","","",41,[[["v"]],["result"]]],[11,"deserialize_bool","","",33,[[["v"]],["result"]]],[11,"deserialize_i8","","",33,[[["v"]],["result"]]],[11,"deserialize_i16","","",33,[[["v"]],["result"]]],[11,"deserialize_i32","","",33,[[["v"]],["result"]]],[11,"deserialize_i64","","",33,[[["v"]],["result"]]],[11,"deserialize_i128","","",33,[[["v"]],["result"]]],[11,"deserialize_u8","","",33,[[["v"]],["result"]]],[11,"deserialize_u16","","",33,[[["v"]],["result"]]],[11,"deserialize_u32","","",33,[[["v"]],["result"]]],[11,"deserialize_u64","","",33,[[["v"]],["result"]]],[11,"deserialize_u128","","",33,[[["v"]],["result"]]],[11,"deserialize_f32","","",33,[[["v"]],["result"]]],[11,"deserialize_f64","","",33,[[["v"]],["result"]]],[11,"deserialize_char","","",33,[[["v"]],["result"]]],[11,"deserialize_str","","",33,[[["v"]],["result"]]],[11,"deserialize_string","","",33,[[["v"]],["result"]]],[11,"deserialize_bytes","","",33,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",33,[[["v"]],["result"]]],[11,"deserialize_option","","",33,[[["v"]],["result"]]],[11,"deserialize_unit","","",33,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",33,[[["v"]],["result"]]],[11,"deserialize_tuple","","",33,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",33,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",33,[[["v"]],["result"]]],[11,"deserialize_struct","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",33,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",33,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",33,[[["v"]],["result"]]],[11,"deserialize_any","","",33,[[["v"]],["result"]]],[11,"deserialize_any","","",46,[[["v"]],["result"]]],[11,"deserialize_enum","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",46,[[["v"]],["result"]]],[11,"deserialize_i8","","",46,[[["v"]],["result"]]],[11,"deserialize_i16","","",46,[[["v"]],["result"]]],[11,"deserialize_i32","","",46,[[["v"]],["result"]]],[11,"deserialize_i64","","",46,[[["v"]],["result"]]],[11,"deserialize_i128","","",46,[[["v"]],["result"]]],[11,"deserialize_u8","","",46,[[["v"]],["result"]]],[11,"deserialize_u16","","",46,[[["v"]],["result"]]],[11,"deserialize_u32","","",46,[[["v"]],["result"]]],[11,"deserialize_u64","","",46,[[["v"]],["result"]]],[11,"deserialize_u128","","",46,[[["v"]],["result"]]],[11,"deserialize_f32","","",46,[[["v"]],["result"]]],[11,"deserialize_f64","","",46,[[["v"]],["result"]]],[11,"deserialize_char","","",46,[[["v"]],["result"]]],[11,"deserialize_str","","",46,[[["v"]],["result"]]],[11,"deserialize_string","","",46,[[["v"]],["result"]]],[11,"deserialize_bytes","","",46,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",46,[[["v"]],["result"]]],[11,"deserialize_option","","",46,[[["v"]],["result"]]],[11,"deserialize_unit","","",46,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",46,[[["v"]],["result"]]],[11,"deserialize_tuple","","",46,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",46,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",46,[[["v"]],["result"]]],[11,"deserialize_struct","","",46,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",46,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",46,[[["v"]],["result"]]],[11,"deserialize_any","","",54,[[["v"]],["result"]]],[11,"deserialize_enum","","",54,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",54,[[["v"]],["result"]]],[11,"deserialize_i8","","",54,[[["v"]],["result"]]],[11,"deserialize_i16","","",54,[[["v"]],["result"]]],[11,"deserialize_i32","","",54,[[["v"]],["result"]]],[11,"deserialize_i64","","",54,[[["v"]],["result"]]],[11,"deserialize_i128","","",54,[[["v"]],["result"]]],[11,"deserialize_u8","","",54,[[["v"]],["result"]]],[11,"deserialize_u16","","",54,[[["v"]],["result"]]],[11,"deserialize_u32","","",54,[[["v"]],["result"]]],[11,"deserialize_u64","","",54,[[["v"]],["result"]]],[11,"deserialize_u128","","",54,[[["v"]],["result"]]],[11,"deserialize_f32","","",54,[[["v"]],["result"]]],[11,"deserialize_f64","","",54,[[["v"]],["result"]]],[11,"deserialize_char","","",54,[[["v"]],["result"]]],[11,"deserialize_str","","",54,[[["v"]],["result"]]],[11,"deserialize_string","","",54,[[["v"]],["result"]]],[11,"deserialize_bytes","","",54,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",54,[[["v"]],["result"]]],[11,"deserialize_option","","",54,[[["v"]],["result"]]],[11,"deserialize_unit","","",54,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",54,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",54,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",54,[[["v"]],["result"]]],[11,"deserialize_tuple","","",54,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",54,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",54,[[["v"]],["result"]]],[11,"deserialize_struct","","",54,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",54,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",54,[[["v"]],["result"]]],[11,"deserialize_bool","","",43,[[["v"]],["result"]]],[11,"deserialize_i8","","",43,[[["v"]],["result"]]],[11,"deserialize_i16","","",43,[[["v"]],["result"]]],[11,"deserialize_i32","","",43,[[["v"]],["result"]]],[11,"deserialize_i64","","",43,[[["v"]],["result"]]],[11,"deserialize_i128","","",43,[[["v"]],["result"]]],[11,"deserialize_u8","","",43,[[["v"]],["result"]]],[11,"deserialize_u16","","",43,[[["v"]],["result"]]],[11,"deserialize_u32","","",43,[[["v"]],["result"]]],[11,"deserialize_u64","","",43,[[["v"]],["result"]]],[11,"deserialize_u128","","",43,[[["v"]],["result"]]],[11,"deserialize_f32","","",43,[[["v"]],["result"]]],[11,"deserialize_f64","","",43,[[["v"]],["result"]]],[11,"deserialize_char","","",43,[[["v"]],["result"]]],[11,"deserialize_str","","",43,[[["v"]],["result"]]],[11,"deserialize_string","","",43,[[["v"]],["result"]]],[11,"deserialize_bytes","","",43,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",43,[[["v"]],["result"]]],[11,"deserialize_option","","",43,[[["v"]],["result"]]],[11,"deserialize_unit","","",43,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",43,[[["v"]],["result"]]],[11,"deserialize_tuple","","",43,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",43,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",43,[[["v"]],["result"]]],[11,"deserialize_struct","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",43,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",43,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",43,[[["v"]],["result"]]],[11,"deserialize_any","","",43,[[["v"]],["result"]]],[11,"deserialize_bool","","",40,[[["v"]],["result"]]],[11,"deserialize_i8","","",40,[[["v"]],["result"]]],[11,"deserialize_i16","","",40,[[["v"]],["result"]]],[11,"deserialize_i32","","",40,[[["v"]],["result"]]],[11,"deserialize_i64","","",40,[[["v"]],["result"]]],[11,"deserialize_i128","","",40,[[["v"]],["result"]]],[11,"deserialize_u8","","",40,[[["v"]],["result"]]],[11,"deserialize_u16","","",40,[[["v"]],["result"]]],[11,"deserialize_u32","","",40,[[["v"]],["result"]]],[11,"deserialize_u64","","",40,[[["v"]],["result"]]],[11,"deserialize_u128","","",40,[[["v"]],["result"]]],[11,"deserialize_f32","","",40,[[["v"]],["result"]]],[11,"deserialize_f64","","",40,[[["v"]],["result"]]],[11,"deserialize_char","","",40,[[["v"]],["result"]]],[11,"deserialize_str","","",40,[[["v"]],["result"]]],[11,"deserialize_string","","",40,[[["v"]],["result"]]],[11,"deserialize_bytes","","",40,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",40,[[["v"]],["result"]]],[11,"deserialize_option","","",40,[[["v"]],["result"]]],[11,"deserialize_unit","","",40,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",40,[[["v"]],["result"]]],[11,"deserialize_tuple","","",40,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",40,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",40,[[["v"]],["result"]]],[11,"deserialize_struct","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",40,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",40,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",40,[[["v"]],["result"]]],[11,"deserialize_any","","",40,[[["v"]],["result"]]],[11,"deserialize_bool","","",31,[[["v"]],["result"]]],[11,"deserialize_i8","","",31,[[["v"]],["result"]]],[11,"deserialize_i16","","",31,[[["v"]],["result"]]],[11,"deserialize_i32","","",31,[[["v"]],["result"]]],[11,"deserialize_i64","","",31,[[["v"]],["result"]]],[11,"deserialize_i128","","",31,[[["v"]],["result"]]],[11,"deserialize_u8","","",31,[[["v"]],["result"]]],[11,"deserialize_u16","","",31,[[["v"]],["result"]]],[11,"deserialize_u32","","",31,[[["v"]],["result"]]],[11,"deserialize_u64","","",31,[[["v"]],["result"]]],[11,"deserialize_u128","","",31,[[["v"]],["result"]]],[11,"deserialize_f32","","",31,[[["v"]],["result"]]],[11,"deserialize_f64","","",31,[[["v"]],["result"]]],[11,"deserialize_char","","",31,[[["v"]],["result"]]],[11,"deserialize_str","","",31,[[["v"]],["result"]]],[11,"deserialize_string","","",31,[[["v"]],["result"]]],[11,"deserialize_bytes","","",31,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",31,[[["v"]],["result"]]],[11,"deserialize_option","","",31,[[["v"]],["result"]]],[11,"deserialize_unit","","",31,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",31,[[["v"]],["result"]]],[11,"deserialize_tuple","","",31,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",31,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",31,[[["v"]],["result"]]],[11,"deserialize_struct","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",31,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",31,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",31,[[["v"]],["result"]]],[11,"deserialize_any","","",31,[[["v"]],["result"]]],[11,"deserialize_any","","",51,[[["v"]],["result"]]],[11,"deserialize_bool","","",51,[[["v"]],["result"]]],[11,"deserialize_i8","","",51,[[["v"]],["result"]]],[11,"deserialize_i16","","",51,[[["v"]],["result"]]],[11,"deserialize_i32","","",51,[[["v"]],["result"]]],[11,"deserialize_i64","","",51,[[["v"]],["result"]]],[11,"deserialize_i128","","",51,[[["v"]],["result"]]],[11,"deserialize_u8","","",51,[[["v"]],["result"]]],[11,"deserialize_u16","","",51,[[["v"]],["result"]]],[11,"deserialize_u32","","",51,[[["v"]],["result"]]],[11,"deserialize_u64","","",51,[[["v"]],["result"]]],[11,"deserialize_u128","","",51,[[["v"]],["result"]]],[11,"deserialize_f32","","",51,[[["v"]],["result"]]],[11,"deserialize_f64","","",51,[[["v"]],["result"]]],[11,"deserialize_char","","",51,[[["v"]],["result"]]],[11,"deserialize_str","","",51,[[["v"]],["result"]]],[11,"deserialize_string","","",51,[[["v"]],["result"]]],[11,"deserialize_bytes","","",51,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",51,[[["v"]],["result"]]],[11,"deserialize_option","","",51,[[["v"]],["result"]]],[11,"deserialize_unit","","",51,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",51,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",51,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",51,[[["v"]],["result"]]],[11,"deserialize_tuple","","",51,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",51,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",51,[[["v"]],["result"]]],[11,"deserialize_struct","","",51,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",51,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",51,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",51,[[["v"]],["result"]]],[11,"deserialize_bool","","",29,[[["v"]],["result"]]],[11,"deserialize_i8","","",29,[[["v"]],["result"]]],[11,"deserialize_i16","","",29,[[["v"]],["result"]]],[11,"deserialize_i32","","",29,[[["v"]],["result"]]],[11,"deserialize_i64","","",29,[[["v"]],["result"]]],[11,"deserialize_i128","","",29,[[["v"]],["result"]]],[11,"deserialize_u8","","",29,[[["v"]],["result"]]],[11,"deserialize_u16","","",29,[[["v"]],["result"]]],[11,"deserialize_u32","","",29,[[["v"]],["result"]]],[11,"deserialize_u64","","",29,[[["v"]],["result"]]],[11,"deserialize_u128","","",29,[[["v"]],["result"]]],[11,"deserialize_f32","","",29,[[["v"]],["result"]]],[11,"deserialize_f64","","",29,[[["v"]],["result"]]],[11,"deserialize_char","","",29,[[["v"]],["result"]]],[11,"deserialize_str","","",29,[[["v"]],["result"]]],[11,"deserialize_string","","",29,[[["v"]],["result"]]],[11,"deserialize_bytes","","",29,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",29,[[["v"]],["result"]]],[11,"deserialize_unit","","",29,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",29,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",29,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",29,[[["v"]],["result"]]],[11,"deserialize_tuple","","",29,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",29,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",29,[[["v"]],["result"]]],[11,"deserialize_struct","","",29,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",29,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",29,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",29,[[["v"]],["result"]]],[11,"deserialize_any","","",29,[[["v"]],["result"]]],[11,"deserialize_option","","",29,[[["v"]],["result"]]],[11,"deserialize_any","","",50,[[["v"]],["result"]]],[11,"deserialize_bool","","",50,[[["v"]],["result"]]],[11,"deserialize_i8","","",50,[[["v"]],["result"]]],[11,"deserialize_i16","","",50,[[["v"]],["result"]]],[11,"deserialize_i32","","",50,[[["v"]],["result"]]],[11,"deserialize_i64","","",50,[[["v"]],["result"]]],[11,"deserialize_i128","","",50,[[["v"]],["result"]]],[11,"deserialize_u8","","",50,[[["v"]],["result"]]],[11,"deserialize_u16","","",50,[[["v"]],["result"]]],[11,"deserialize_u32","","",50,[[["v"]],["result"]]],[11,"deserialize_u64","","",50,[[["v"]],["result"]]],[11,"deserialize_u128","","",50,[[["v"]],["result"]]],[11,"deserialize_f32","","",50,[[["v"]],["result"]]],[11,"deserialize_f64","","",50,[[["v"]],["result"]]],[11,"deserialize_char","","",50,[[["v"]],["result"]]],[11,"deserialize_str","","",50,[[["v"]],["result"]]],[11,"deserialize_string","","",50,[[["v"]],["result"]]],[11,"deserialize_bytes","","",50,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",50,[[["v"]],["result"]]],[11,"deserialize_option","","",50,[[["v"]],["result"]]],[11,"deserialize_unit","","",50,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",50,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",50,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",50,[[["v"]],["result"]]],[11,"deserialize_tuple","","",50,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",50,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",50,[[["v"]],["result"]]],[11,"deserialize_struct","","",50,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",50,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",50,[[["v"]],["result"]]],[11,"deserialize_enum","","",50,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",39,[[["v"]],["result"]]],[11,"deserialize_i8","","",39,[[["v"]],["result"]]],[11,"deserialize_i16","","",39,[[["v"]],["result"]]],[11,"deserialize_i32","","",39,[[["v"]],["result"]]],[11,"deserialize_i64","","",39,[[["v"]],["result"]]],[11,"deserialize_i128","","",39,[[["v"]],["result"]]],[11,"deserialize_u8","","",39,[[["v"]],["result"]]],[11,"deserialize_u16","","",39,[[["v"]],["result"]]],[11,"deserialize_u32","","",39,[[["v"]],["result"]]],[11,"deserialize_u64","","",39,[[["v"]],["result"]]],[11,"deserialize_u128","","",39,[[["v"]],["result"]]],[11,"deserialize_f32","","",39,[[["v"]],["result"]]],[11,"deserialize_f64","","",39,[[["v"]],["result"]]],[11,"deserialize_char","","",39,[[["v"]],["result"]]],[11,"deserialize_str","","",39,[[["v"]],["result"]]],[11,"deserialize_string","","",39,[[["v"]],["result"]]],[11,"deserialize_bytes","","",39,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",39,[[["v"]],["result"]]],[11,"deserialize_option","","",39,[[["v"]],["result"]]],[11,"deserialize_unit","","",39,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",39,[[["v"]],["result"]]],[11,"deserialize_tuple","","",39,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",39,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",39,[[["v"]],["result"]]],[11,"deserialize_struct","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",39,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",39,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",39,[[["v"]],["result"]]],[11,"deserialize_any","","",39,[[["v"]],["result"]]],[11,"deserialize_bool","","",45,[[["v"]],["result"]]],[11,"deserialize_i8","","",45,[[["v"]],["result"]]],[11,"deserialize_i16","","",45,[[["v"]],["result"]]],[11,"deserialize_i32","","",45,[[["v"]],["result"]]],[11,"deserialize_i64","","",45,[[["v"]],["result"]]],[11,"deserialize_i128","","",45,[[["v"]],["result"]]],[11,"deserialize_u8","","",45,[[["v"]],["result"]]],[11,"deserialize_u16","","",45,[[["v"]],["result"]]],[11,"deserialize_u32","","",45,[[["v"]],["result"]]],[11,"deserialize_u64","","",45,[[["v"]],["result"]]],[11,"deserialize_u128","","",45,[[["v"]],["result"]]],[11,"deserialize_f32","","",45,[[["v"]],["result"]]],[11,"deserialize_f64","","",45,[[["v"]],["result"]]],[11,"deserialize_char","","",45,[[["v"]],["result"]]],[11,"deserialize_str","","",45,[[["v"]],["result"]]],[11,"deserialize_string","","",45,[[["v"]],["result"]]],[11,"deserialize_bytes","","",45,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",45,[[["v"]],["result"]]],[11,"deserialize_option","","",45,[[["v"]],["result"]]],[11,"deserialize_unit","","",45,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",45,[[["v"]],["result"]]],[11,"deserialize_tuple","","",45,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",45,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",45,[[["v"]],["result"]]],[11,"deserialize_struct","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",45,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",45,[[["v"]],["result"]]],[11,"deserialize_any","","",45,[[["v"]],["result"]]],[11,"deserialize_enum","","",45,[[["str"],["v"]],["result"]]],[11,"deserialize_any","","",47,[[["v"]],["result"]]],[11,"deserialize_enum","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_bool","","",47,[[["v"]],["result"]]],[11,"deserialize_i8","","",47,[[["v"]],["result"]]],[11,"deserialize_i16","","",47,[[["v"]],["result"]]],[11,"deserialize_i32","","",47,[[["v"]],["result"]]],[11,"deserialize_i64","","",47,[[["v"]],["result"]]],[11,"deserialize_i128","","",47,[[["v"]],["result"]]],[11,"deserialize_u8","","",47,[[["v"]],["result"]]],[11,"deserialize_u16","","",47,[[["v"]],["result"]]],[11,"deserialize_u32","","",47,[[["v"]],["result"]]],[11,"deserialize_u64","","",47,[[["v"]],["result"]]],[11,"deserialize_u128","","",47,[[["v"]],["result"]]],[11,"deserialize_f32","","",47,[[["v"]],["result"]]],[11,"deserialize_f64","","",47,[[["v"]],["result"]]],[11,"deserialize_char","","",47,[[["v"]],["result"]]],[11,"deserialize_str","","",47,[[["v"]],["result"]]],[11,"deserialize_string","","",47,[[["v"]],["result"]]],[11,"deserialize_bytes","","",47,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",47,[[["v"]],["result"]]],[11,"deserialize_option","","",47,[[["v"]],["result"]]],[11,"deserialize_unit","","",47,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",47,[[["v"]],["result"]]],[11,"deserialize_tuple","","",47,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",47,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",47,[[["v"]],["result"]]],[11,"deserialize_struct","","",47,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",47,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",47,[[["v"]],["result"]]],[11,"deserialize_bool","","",30,[[["v"]],["result"]]],[11,"deserialize_i8","","",30,[[["v"]],["result"]]],[11,"deserialize_i16","","",30,[[["v"]],["result"]]],[11,"deserialize_i32","","",30,[[["v"]],["result"]]],[11,"deserialize_i64","","",30,[[["v"]],["result"]]],[11,"deserialize_i128","","",30,[[["v"]],["result"]]],[11,"deserialize_u8","","",30,[[["v"]],["result"]]],[11,"deserialize_u16","","",30,[[["v"]],["result"]]],[11,"deserialize_u32","","",30,[[["v"]],["result"]]],[11,"deserialize_u64","","",30,[[["v"]],["result"]]],[11,"deserialize_u128","","",30,[[["v"]],["result"]]],[11,"deserialize_f32","","",30,[[["v"]],["result"]]],[11,"deserialize_f64","","",30,[[["v"]],["result"]]],[11,"deserialize_char","","",30,[[["v"]],["result"]]],[11,"deserialize_str","","",30,[[["v"]],["result"]]],[11,"deserialize_string","","",30,[[["v"]],["result"]]],[11,"deserialize_bytes","","",30,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",30,[[["v"]],["result"]]],[11,"deserialize_option","","",30,[[["v"]],["result"]]],[11,"deserialize_unit","","",30,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",30,[[["v"]],["result"]]],[11,"deserialize_tuple","","",30,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",30,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",30,[[["v"]],["result"]]],[11,"deserialize_struct","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",30,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",30,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",30,[[["v"]],["result"]]],[11,"deserialize_any","","",30,[[["v"]],["result"]]],[11,"deserialize_bool","","",44,[[["v"]],["result"]]],[11,"deserialize_i8","","",44,[[["v"]],["result"]]],[11,"deserialize_i16","","",44,[[["v"]],["result"]]],[11,"deserialize_i32","","",44,[[["v"]],["result"]]],[11,"deserialize_i64","","",44,[[["v"]],["result"]]],[11,"deserialize_i128","","",44,[[["v"]],["result"]]],[11,"deserialize_u8","","",44,[[["v"]],["result"]]],[11,"deserialize_u16","","",44,[[["v"]],["result"]]],[11,"deserialize_u32","","",44,[[["v"]],["result"]]],[11,"deserialize_u64","","",44,[[["v"]],["result"]]],[11,"deserialize_u128","","",44,[[["v"]],["result"]]],[11,"deserialize_f32","","",44,[[["v"]],["result"]]],[11,"deserialize_f64","","",44,[[["v"]],["result"]]],[11,"deserialize_char","","",44,[[["v"]],["result"]]],[11,"deserialize_str","","",44,[[["v"]],["result"]]],[11,"deserialize_string","","",44,[[["v"]],["result"]]],[11,"deserialize_bytes","","",44,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",44,[[["v"]],["result"]]],[11,"deserialize_option","","",44,[[["v"]],["result"]]],[11,"deserialize_unit","","",44,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",44,[[["v"]],["result"]]],[11,"deserialize_tuple","","",44,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",44,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",44,[[["v"]],["result"]]],[11,"deserialize_struct","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",44,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",44,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",44,[[["v"]],["result"]]],[11,"deserialize_any","","",44,[[["v"]],["result"]]],[11,"deserialize_bool","","",42,[[["v"]],["result"]]],[11,"deserialize_i8","","",42,[[["v"]],["result"]]],[11,"deserialize_i16","","",42,[[["v"]],["result"]]],[11,"deserialize_i32","","",42,[[["v"]],["result"]]],[11,"deserialize_i64","","",42,[[["v"]],["result"]]],[11,"deserialize_i128","","",42,[[["v"]],["result"]]],[11,"deserialize_u8","","",42,[[["v"]],["result"]]],[11,"deserialize_u16","","",42,[[["v"]],["result"]]],[11,"deserialize_u32","","",42,[[["v"]],["result"]]],[11,"deserialize_u64","","",42,[[["v"]],["result"]]],[11,"deserialize_u128","","",42,[[["v"]],["result"]]],[11,"deserialize_f32","","",42,[[["v"]],["result"]]],[11,"deserialize_f64","","",42,[[["v"]],["result"]]],[11,"deserialize_char","","",42,[[["v"]],["result"]]],[11,"deserialize_str","","",42,[[["v"]],["result"]]],[11,"deserialize_string","","",42,[[["v"]],["result"]]],[11,"deserialize_bytes","","",42,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",42,[[["v"]],["result"]]],[11,"deserialize_option","","",42,[[["v"]],["result"]]],[11,"deserialize_unit","","",42,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",42,[[["v"]],["result"]]],[11,"deserialize_tuple","","",42,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",42,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",42,[[["v"]],["result"]]],[11,"deserialize_struct","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",42,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",42,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",42,[[["v"]],["result"]]],[11,"deserialize_any","","",42,[[["v"]],["result"]]],[11,"deserialize_bool","","",36,[[["v"]],["result"]]],[11,"deserialize_i8","","",36,[[["v"]],["result"]]],[11,"deserialize_i16","","",36,[[["v"]],["result"]]],[11,"deserialize_i32","","",36,[[["v"]],["result"]]],[11,"deserialize_i64","","",36,[[["v"]],["result"]]],[11,"deserialize_i128","","",36,[[["v"]],["result"]]],[11,"deserialize_u8","","",36,[[["v"]],["result"]]],[11,"deserialize_u16","","",36,[[["v"]],["result"]]],[11,"deserialize_u32","","",36,[[["v"]],["result"]]],[11,"deserialize_u64","","",36,[[["v"]],["result"]]],[11,"deserialize_u128","","",36,[[["v"]],["result"]]],[11,"deserialize_f32","","",36,[[["v"]],["result"]]],[11,"deserialize_f64","","",36,[[["v"]],["result"]]],[11,"deserialize_char","","",36,[[["v"]],["result"]]],[11,"deserialize_str","","",36,[[["v"]],["result"]]],[11,"deserialize_string","","",36,[[["v"]],["result"]]],[11,"deserialize_bytes","","",36,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",36,[[["v"]],["result"]]],[11,"deserialize_option","","",36,[[["v"]],["result"]]],[11,"deserialize_unit","","",36,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",36,[[["v"]],["result"]]],[11,"deserialize_tuple","","",36,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",36,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",36,[[["v"]],["result"]]],[11,"deserialize_struct","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",36,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",36,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",36,[[["v"]],["result"]]],[11,"deserialize_any","","",36,[[["v"]],["result"]]],[11,"deserialize_any","","",52,[[["v"]],["result"]]],[11,"deserialize_bool","","",52,[[["v"]],["result"]]],[11,"deserialize_i8","","",52,[[["v"]],["result"]]],[11,"deserialize_i16","","",52,[[["v"]],["result"]]],[11,"deserialize_i32","","",52,[[["v"]],["result"]]],[11,"deserialize_i64","","",52,[[["v"]],["result"]]],[11,"deserialize_i128","","",52,[[["v"]],["result"]]],[11,"deserialize_u8","","",52,[[["v"]],["result"]]],[11,"deserialize_u16","","",52,[[["v"]],["result"]]],[11,"deserialize_u32","","",52,[[["v"]],["result"]]],[11,"deserialize_u64","","",52,[[["v"]],["result"]]],[11,"deserialize_u128","","",52,[[["v"]],["result"]]],[11,"deserialize_f32","","",52,[[["v"]],["result"]]],[11,"deserialize_f64","","",52,[[["v"]],["result"]]],[11,"deserialize_char","","",52,[[["v"]],["result"]]],[11,"deserialize_str","","",52,[[["v"]],["result"]]],[11,"deserialize_string","","",52,[[["v"]],["result"]]],[11,"deserialize_bytes","","",52,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",52,[[["v"]],["result"]]],[11,"deserialize_option","","",52,[[["v"]],["result"]]],[11,"deserialize_unit","","",52,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",52,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",52,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",52,[[["v"]],["result"]]],[11,"deserialize_tuple","","",52,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",52,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",52,[[["v"]],["result"]]],[11,"deserialize_struct","","",52,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",52,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",52,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",52,[[["v"]],["result"]]],[11,"deserialize_bool","","",35,[[["v"]],["result"]]],[11,"deserialize_i8","","",35,[[["v"]],["result"]]],[11,"deserialize_i16","","",35,[[["v"]],["result"]]],[11,"deserialize_i32","","",35,[[["v"]],["result"]]],[11,"deserialize_i64","","",35,[[["v"]],["result"]]],[11,"deserialize_i128","","",35,[[["v"]],["result"]]],[11,"deserialize_u8","","",35,[[["v"]],["result"]]],[11,"deserialize_u16","","",35,[[["v"]],["result"]]],[11,"deserialize_u32","","",35,[[["v"]],["result"]]],[11,"deserialize_u64","","",35,[[["v"]],["result"]]],[11,"deserialize_u128","","",35,[[["v"]],["result"]]],[11,"deserialize_f32","","",35,[[["v"]],["result"]]],[11,"deserialize_f64","","",35,[[["v"]],["result"]]],[11,"deserialize_char","","",35,[[["v"]],["result"]]],[11,"deserialize_str","","",35,[[["v"]],["result"]]],[11,"deserialize_string","","",35,[[["v"]],["result"]]],[11,"deserialize_bytes","","",35,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",35,[[["v"]],["result"]]],[11,"deserialize_option","","",35,[[["v"]],["result"]]],[11,"deserialize_unit","","",35,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",35,[[["v"]],["result"]]],[11,"deserialize_tuple","","",35,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",35,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",35,[[["v"]],["result"]]],[11,"deserialize_struct","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",35,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",35,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",35,[[["v"]],["result"]]],[11,"deserialize_any","","",35,[[["v"]],["result"]]],[11,"deserialize_bool","","",34,[[["v"]],["result"]]],[11,"deserialize_i8","","",34,[[["v"]],["result"]]],[11,"deserialize_i16","","",34,[[["v"]],["result"]]],[11,"deserialize_i32","","",34,[[["v"]],["result"]]],[11,"deserialize_i64","","",34,[[["v"]],["result"]]],[11,"deserialize_i128","","",34,[[["v"]],["result"]]],[11,"deserialize_u8","","",34,[[["v"]],["result"]]],[11,"deserialize_u16","","",34,[[["v"]],["result"]]],[11,"deserialize_u32","","",34,[[["v"]],["result"]]],[11,"deserialize_u64","","",34,[[["v"]],["result"]]],[11,"deserialize_u128","","",34,[[["v"]],["result"]]],[11,"deserialize_f32","","",34,[[["v"]],["result"]]],[11,"deserialize_f64","","",34,[[["v"]],["result"]]],[11,"deserialize_char","","",34,[[["v"]],["result"]]],[11,"deserialize_str","","",34,[[["v"]],["result"]]],[11,"deserialize_string","","",34,[[["v"]],["result"]]],[11,"deserialize_bytes","","",34,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",34,[[["v"]],["result"]]],[11,"deserialize_option","","",34,[[["v"]],["result"]]],[11,"deserialize_unit","","",34,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",34,[[["v"]],["result"]]],[11,"deserialize_tuple","","",34,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",34,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",34,[[["v"]],["result"]]],[11,"deserialize_struct","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",34,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",34,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",34,[[["v"]],["result"]]],[11,"deserialize_any","","",34,[[["v"]],["result"]]],[11,"serialize_field","forest_encoding::ser","",56,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",56,[[],["result"]]],[11,"variant_seed","forest_encoding::de::value","",49,[[["t"]],["result"]]],[11,"variant_seed","","",48,[[["t"]],["result"]]],[11,"variant_seed","","",47,[[["t"]],["result"]]],[11,"variant_seed","","",45,[[["t"]],["result"]]],[11,"variant_seed","","",54,[[["t"]],["result"]]],[11,"variant_seed","","",46,[[["t"]],["result"]]],[11,"serialize_field","forest_encoding::ser","",56,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",56,[[],["result"]]],[11,"description","forest_encoding::de::value","",28,[[["self"]],["str"]]],[11,"expecting","forest_encoding::de","",55,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"visit_bool","","",55,[[["bool"]],["result"]]],[11,"visit_i64","","",55,[[["i64"]],["result"]]],[11,"visit_u64","","",55,[[["u64"]],["result"]]],[11,"visit_f64","","",55,[[["f64"]],["result"]]],[11,"visit_str","","",55,[[["str"]],["result"]]],[11,"visit_none","","",55,[[],["result"]]],[11,"visit_some","","",55,[[["d"]],["result"]]],[11,"visit_newtype_struct","","",55,[[["d"]],["result"]]],[11,"visit_unit","","",55,[[],["result"]]],[11,"visit_seq","","",55,[[["a"]],["result"]]],[11,"visit_map","","",55,[[["a"]],["result"]]],[11,"visit_bytes","","",55,[[],["result"]]],[11,"visit_enum","","",55,[[["a"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","forest_encoding::de::value","",28,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"serialize_key","forest_encoding::ser","",56,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",56,[[["self"],["t"]],["result"]]],[11,"end","","",56,[[],["result"]]],[11,"serialize_field","","",56,[[["self"],["t"]],["result"]]],[11,"end","","",56,[[],["result"]]],[11,"serialize_field","","",56,[[["self"],["t"]],["result"]]],[11,"end","","",56,[[],["result"]]],[11,"serialize_element","","",56,[[["self"],["t"]],["result"]]],[11,"end","","",56,[[],["result"]]],[11,"eq","forest_encoding::de::value","",28,[[["error"],["self"]],["bool"]]],[11,"ne","","",28,[[["error"],["self"]],["bool"]]],[11,"eq","forest_encoding::de","",1,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",1,[[["self"],["unexpected"]],["bool"]]],[11,"serialize_element","forest_encoding::ser","",56,[[["self"],["t"]],["result"]]],[11,"end","","",56,[[],["result"]]],[11,"clone","forest_encoding::de::value","",48,[[["self"]],["stringdeserializer"]]],[11,"clone","","",46,[[["self"]],["strdeserializer"]]],[11,"clone","","",41,[[["self"]],["f64deserializer"]]],[11,"clone","","",43,[[["self"]],["i128deserializer"]]],[11,"clone","","",54,[[["self"]],["mapaccessdeserializer"]]],[11,"clone","","",40,[[["self"]],["f32deserializer"]]],[11,"clone","","",53,[[["self"]],["mapdeserializer"]]],[11,"clone","forest_encoding::de","",55,[[["self"]],["ignoredany"]]],[11,"clone","forest_encoding::de::value","",33,[[["self"]],["i32deserializer"]]],[11,"clone","","",37,[[["self"]],["u16deserializer"]]],[11,"clone","","",39,[[["self"]],["usizedeserializer"]]],[11,"clone","","",36,[[["self"]],["u8deserializer"]]],[11,"clone","","",38,[[["self"]],["u64deserializer"]]],[11,"clone","forest_encoding::de","",1,[[["self"]],["unexpected"]]],[11,"clone","forest_encoding::de::value","",34,[[["self"]],["i64deserializer"]]],[11,"clone","","",49,[[["self"]],["cowstrdeserializer"]]],[11,"clone","","",28,[[["self"]],["error"]]],[11,"clone","","",32,[[["self"]],["i16deserializer"]]],[11,"clone","","",52,[[["self"]],["seqaccessdeserializer"]]],[11,"clone","","",45,[[["self"]],["u32deserializer"]]],[11,"clone","","",50,[[["self"]],["borrowedbytesdeserializer"]]],[11,"clone","","",44,[[["self"]],["u128deserializer"]]],[11,"clone","","",47,[[["self"]],["borrowedstrdeserializer"]]],[11,"clone","","",51,[[["self"]],["seqdeserializer"]]],[11,"clone","","",35,[[["self"]],["isizedeserializer"]]],[11,"clone","","",31,[[["self"]],["i8deserializer"]]],[11,"clone","","",29,[[["self"]],["unitdeserializer"]]],[11,"clone","","",30,[[["self"]],["booldeserializer"]]],[11,"clone","","",42,[[["self"]],["chardeserializer"]]],[11,"fmt","","",52,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",40,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",28,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",49,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",36,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",50,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","forest_encoding::de","",55,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","forest_encoding::de::value","",42,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","forest_encoding::de","",1,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","forest_encoding::de::value","",33,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",32,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",29,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"next_key_seed","","",53,[[["self"],["t"]],[["option"],["result",["option"]]]]],[11,"next_value_seed","","",53,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",53,[[["tv"],["self"],["tk"]],[["result",["option"]],["option"]]]],[11,"size_hint","","",53,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next_element_seed","","",53,[[["self"],["t"]],[["result",["option"]],["option"]]]],[11,"size_hint","","",53,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"next_element_seed","","",51,[[["self"],["v"]],[["result",["option"]],["option"]]]],[11,"size_hint","","",51,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"custom","","",28,[[["t"]],["error"]]],[11,"default","forest_encoding::de","",55,[[],["ignoredany"]]],[11,"deserialize","","",55,[[["d"]],[["ignoredany"],["result",["ignoredany"]]]]],[11,"custom","forest_encoding::de::value","",28,[[["t"]],["error"]]],[11,"from","forest_encoding","",25,[[["cborerror"]],["error"]]],[11,"eq","","",25,[[["self"],["error"]],["bool"]]],[11,"ne","","",25,[[["self"],["error"]],["bool"]]],[11,"eq","","",26,[[["codecprotocol"],["self"]],["bool"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"new","forest_encoding::de::value","Create a new borrowed deserializer from the given string.",47,[[["str"]],["borrowedstrdeserializer"]]],[11,"new","","Create a new borrowed deserializer from the given byte…",50,[[],["borrowedbytesdeserializer"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",51,[[["i"]],["seqdeserializer"]]],[11,"end","","Check for remaining elements after passing a…",51,[[],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",52,[[["a"]],["seqaccessdeserializer"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",53,[[["i"]],["mapdeserializer"]]],[11,"end","","Check for remaining elements after passing a…",53,[[],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",54,[[["a"]],["mapaccessdeserializer"]]],[11,"is","forest_encoding::ser","Returns `true` if the boxed type is the same as `T`",12,[[["self"]],["bool"]]],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type…",12,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is…",12,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],[["option"],["t"]]]],[11,"is","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],["bool"]]],[11,"downcast_ref","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],[["t"],["option"]]]],[11,"downcast_mut","","Forwards to the method defined on the type `dyn Error`.",12,[[["self"]],[["option"],["t"]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["box",["error"]],["error"]],[["box",["error"]],["box"],["result",["box","box"]]]]],[11,"chain","","Returns an iterator starting with the current error and…",12,[[["self"]],["chain"]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["error"],["box",["error"]]],[["result",["box","box"]],["box"],["box",["error"]]]]],[11,"downcast","","Attempts to downcast the box to a concrete type.",12,[[["box",["error"]],["error"]],[["box",["error"]],["box"],["result",["box","box"]]]]],[11,"offset","forest_encoding::error","The byte offset at which the error occurred.",57,[[["self"]],["u64"]]],[11,"classify","","Categorizes the cause of this error.",57,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read…",57,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was…",57,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by data that was…",57,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely…",57,[[["self"]],["bool"]]],[11,"is_scratch_too_small","","Returns true if this error was caused by the scratch…",57,[[["self"]],["bool"]]],[11,"new","forest_encoding::tags","Create a new tagged value",24,[[["t"],["option",["u64"]],["u64"]],["tagged"]]],[11,"marshal_cbor","forest_encoding","",27,[[["self"]],[["error"],["vec",["u8"]],["result",["vec","error"]]]]]],"p":[[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"StdError"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Category"],[3,"Tagged"],[4,"Error"],[4,"CodecProtocol"],[8,"Cbor"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[3,"Impossible"],[3,"Error"]]};
searchIndex["forest_ipld"] = {"doc":"","i":[[3,"IpldVisitor","forest_ipld","Struct used in deserialization to decode cbor encoded data…",null,null],[4,"Ipld","","Represents IPLD data structure used when serializing and…",null,null],[13,"Null","","",0,null],[13,"Bool","","",0,null],[13,"Integer","","",0,null],[13,"Float","","",0,null],[13,"String","","",0,null],[13,"Bytes","","",0,null],[13,"List","","",0,null],[13,"Map","","",0,null],[13,"Link","","",0,null],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["ipld"]]],[11,"eq","","",0,[[["ipld"],["self"]],["bool"]]],[11,"ne","","",0,[[["ipld"],["self"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"expecting","","",1,[[["formatter"],["self"]],["result"]]],[11,"visit_str","","",1,[[["str"]],["result"]]],[11,"visit_string","","",1,[[["string"]],["result"]]],[11,"visit_bytes","","",1,[[],["result"]]],[11,"visit_byte_buf","","",1,[[["vec",["u8"]],["u8"]],["result"]]],[11,"visit_u64","","",1,[[["u64"]],["result"]]],[11,"visit_i64","","",1,[[["i64"]],["result"]]],[11,"visit_i128","","",1,[[["i128"]],["result"]]],[11,"visit_bool","","",1,[[["bool"]],["result"]]],[11,"visit_none","","",1,[[],["result"]]],[11,"visit_unit","","",1,[[],["result"]]],[11,"visit_seq","","",1,[[["v"]],["result"]]],[11,"visit_map","","",1,[[["v"]],["result"]]],[11,"visit_f64","","",1,[[["f64"]],["result"]]],[11,"visit_newtype_struct","","",1,[[["d"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result"]]]],"p":[[4,"Ipld"],[3,"IpldVisitor"]]};
searchIndex["forest_libp2p"] = {"doc":"","i":[[0,"behaviour","forest_libp2p","",null,null],[3,"MyBehaviour","forest_libp2p::behaviour","",null,null],[12,"gossipsub","","",0,null],[12,"mdns","","",0,null],[12,"ping","","",0,null],[12,"identify","","",0,null],[4,"MyBehaviourEvent","","",null,null],[13,"DiscoveredPeer","","",1,null],[13,"ExpiredPeer","","",1,null],[13,"GossipMessage","","",1,null],[12,"source","forest_libp2p::behaviour::MyBehaviourEvent","",1,null],[12,"topics","","",1,null],[12,"message","","",1,null],[11,"new","forest_libp2p::behaviour","",0,[[["logger"],["keypair"]],["self"]]],[11,"publish","","",0,[[["self"],["topic"]]]],[11,"subscribe","","",0,[[["topic"],["self"]],["bool"]]],[0,"config","forest_libp2p","",null,null],[3,"Libp2pConfig","forest_libp2p::config","",null,null],[12,"listening_multiaddr","","",2,null],[12,"bootstrap_peers","","",2,null],[12,"pubsub_topics","","",2,null],[0,"service","forest_libp2p","",null,null],[3,"Libp2pService","forest_libp2p::service","The Libp2pService listens to events from the Libp2p swarm.",null,null],[12,"swarm","","",3,null],[4,"NetworkEvent","","Events emitted by this Service to be listened by the…",null,null],[13,"PubsubMessage","","",4,null],[12,"source","forest_libp2p::service::NetworkEvent","",4,null],[12,"topics","","",4,null],[12,"message","","",4,null],[5,"build_transport","forest_libp2p::service","",null,[[["keypair"]],[["error"],["boxed",["error"]]]]],[11,"new","","Constructs a Libp2pService",3,[[["logger"],["libp2pconfig"]],["self"]]],[11,"from","forest_libp2p::behaviour","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","forest_libp2p::config","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"clear","","",2,[[["self"]]]],[11,"initialize","","",2,[[]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","forest_libp2p::service","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"clone","","",4,[[["self"]],["networkevent"]]],[11,"default","forest_libp2p::config","",2,[[],["self"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"poll","forest_libp2p::service","Continuously polls the Libp2p swarm to get events",3,[[["self"]],[["async",["option"]],["result",["async"]]]]],[11,"deserialize","forest_libp2p::config","",2,[[["__d"]],["result"]]],[11,"new_handler","forest_libp2p::behaviour","",0,[[["self"]]]],[11,"addresses_of_peer","","",0,[[["self"],["peerid"]],[["multiaddr"],["vec",["multiaddr"]]]]],[11,"inject_connected","","",0,[[["self"],["connectedpoint"],["peerid"]]]],[11,"inject_disconnected","","",0,[[["self"],["peerid"],["connectedpoint"]]]],[11,"inject_replaced","","",0,[[["connectedpoint"],["self"],["peerid"]]]],[11,"inject_addr_reach_failure","","",0,[[["multiaddr"],["error"],["self"],["option",["peerid"]],["peerid"]]]],[11,"inject_dial_failure","","",0,[[["self"],["peerid"]]]],[11,"inject_new_listen_addr","","",0,[[["multiaddr"],["self"]]]],[11,"inject_expired_listen_addr","","",0,[[["multiaddr"],["self"]]]],[11,"inject_new_external_addr","","",0,[[["multiaddr"],["self"]]]],[11,"inject_listener_error","","",0,[[["self"],["error"],["listenerid"]]]],[11,"inject_listener_closed","","",0,[[["self"],["listenerid"]]]],[11,"inject_node_event","","",0,[[["self"],["peerid"]]]],[11,"poll","","",0,[[["self"]],[["async",["networkbehaviouraction"]],["networkbehaviouraction"]]]],[11,"inject_event","","",0,[[["self"],["mdnsevent"]]]],[11,"inject_event","","",0,[[["self"],["gossipsubevent"]]]],[11,"inject_event","","",0,[[["self"],["pingevent"]]]],[11,"inject_event","","",0,[[["self"],["identifyevent"]]]]],"p":[[3,"MyBehaviour"],[4,"MyBehaviourEvent"],[3,"Libp2pConfig"],[3,"Libp2pService"],[4,"NetworkEvent"]]};
searchIndex["forest_message"] = {"doc":"","i":[[3,"MessageReceipt","forest_message","Result of a state transition from a message",null,null],[12,"exit_code","","",0,null],[12,"return_data","","",0,null],[12,"gas_used","","",0,null],[3,"SignedMessage","","Represents a wrapped message with signature bytes",null,null],[3,"UnsignedMessage","","Default Unsigned VM message type which includes all data…",null,null],[3,"MessageBuilder","","Builder for `UnsignedMessage`.",null,null],[11,"new","","",1,[[["unsignedmessage"],["s"]],[["result",["cryptoerror"]],["cryptoerror"]]]],[11,"message","","",1,[[["self"]],["unsignedmessage"]]],[11,"signature","","",1,[[["self"]],["signature"]]],[11,"from","","",2,[[["self"],["address"]],["self"]]],[11,"to","","",2,[[["self"],["address"]],["self"]]],[11,"sequence","","",2,[[["self"],["u64"]],["self"]]],[11,"value","","",2,[[["self"],["tokenamount"]],["self"]]],[11,"method_num","","",2,[[["self"],["methodnum"]],["self"]]],[11,"params","","",2,[[["self"],["serialized"]],["self"]]],[11,"gas_price","","",2,[[["self"],["biguint"]],["self"]]],[11,"gas_limit","","",2,[[["self"],["biguint"]],["self"]]],[11,"build","","Builds a new `UnsignedMessage`.",2,[[["self"]],[["string"],["unsignedmessage"],["result",["unsignedmessage","string"]]]]],[11,"builder","","",3,[[],["messagebuilder"]]],[8,"Message","","",null,null],[10,"from","","Returns the from address of the message",4,[[["self"]],["address"]]],[10,"to","","Returns the destination address of the message",4,[[["self"]],["address"]]],[10,"sequence","","Returns the message sequence or nonce",4,[[["self"]],["u64"]]],[10,"value","","Returns the amount sent in message",4,[[["self"]],["tokenamount"]]],[10,"method_num","","Returns the method number to be called",4,[[["self"]],["methodnum"]]],[10,"params","","Returns the encoded parameters for the method call",4,[[["self"]],["serialized"]]],[10,"gas_price","","gas_price returns gas price for the message",4,[[["self"]],["biguint"]]],[10,"gas_limit","","Returns the gas limit for the message",4,[[["self"]],["biguint"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",1,[[["self"]],["address"]]],[11,"to","","",1,[[["self"]],["address"]]],[11,"sequence","","",1,[[["self"]],["u64"]]],[11,"value","","",1,[[["self"]],["tokenamount"]]],[11,"method_num","","",1,[[["self"]],["methodnum"]]],[11,"params","","",1,[[["self"]],["serialized"]]],[11,"gas_price","","",1,[[["self"]],["biguint"]]],[11,"gas_limit","","",1,[[["self"]],["biguint"]]],[11,"from","","",3,[[["self"]],["address"]]],[11,"to","","",3,[[["self"]],["address"]]],[11,"sequence","","",3,[[["self"]],["u64"]]],[11,"value","","",3,[[["self"]],["tokenamount"]]],[11,"method_num","","",3,[[["self"]],["methodnum"]]],[11,"params","","",3,[[["self"]],["serialized"]]],[11,"gas_price","","",3,[[["self"]],["biguint"]]],[11,"gas_limit","","",3,[[["self"]],["biguint"]]],[11,"clone","","",0,[[["self"]],["messagereceipt"]]],[11,"clone","","",1,[[["self"]],["signedmessage"]]],[11,"clone","","",3,[[["self"]],["unsignedmessage"]]],[11,"clone","","",2,[[["self"]],["messagebuilder"]]],[11,"default","","",2,[[],["messagebuilder"]]],[11,"eq","","",0,[[["self"],["messagereceipt"]],["bool"]]],[11,"ne","","",0,[[["self"],["messagereceipt"]],["bool"]]],[11,"eq","","",1,[[["self"],["signedmessage"]],["bool"]]],[11,"ne","","",1,[[["self"],["signedmessage"]],["bool"]]],[11,"eq","","",3,[[["unsignedmessage"],["self"]],["bool"]]],[11,"ne","","",3,[[["unsignedmessage"],["self"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",1,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["s"],["self"]],["result"]]],[11,"deserialize","","",1,[[["__d"]],["result"]]],[11,"deserialize","","",3,[[["d"]],["result"]]]],"p":[[3,"MessageReceipt"],[3,"SignedMessage"],[3,"MessageBuilder"],[3,"UnsignedMessage"],[8,"Message"]]};
searchIndex["interpreter"] = {"doc":"","i":[[3,"VMInterpreter","interpreter","Interpreter which handles execution of state transitioning…",null,null],[3,"BlockMessages","","Represents the messages from one block in a tipset.",null,null],[3,"TipSetMessages","","Represents the messages from a tipset, grouped by block.",null,null],[11,"apply_tip_set_messages","","Apply all messages from a tipset Returns result StateTree…",0,[[["st"],["tipset"],["tipsetmessages"]]]],[11,"apply_message","","Applies the state transition for a single message Returns…",0,[[["chainstore"],["st"],["unsignedmessage"],["address"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]]],"p":[[3,"VMInterpreter"],[3,"BlockMessages"],[3,"TipSetMessages"]]};
searchIndex["network"] = {"doc":"","i":[[0,"service","network","",null,null],[3,"NetworkService","network::service","Receives commands through a channel which communicates…",null,null],[12,"libp2p","","Libp2p instance",0,null],[4,"NetworkMessage","","Ingress events to the NetworkService",null,null],[13,"PubsubMessage","","",1,null],[12,"topics","network::service::NetworkMessage","",1,null],[12,"message","","",1,null],[11,"new","network::service","Starts a Libp2pService with a given config,…",0,[[["networkevent"],["libp2pconfig"],["taskexecutor"],["unboundedsender",["networkevent"]],["logger"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]]],"p":[[3,"NetworkService"],[4,"NetworkMessage"]]};
searchIndex["node"] = {"doc":"","i":[[5,"main","node","",null,[[]]],[0,"cli","","",null,null],[5,"cli","node::cli","",null,[[["logger"]],[["config"],["error"],["result",["config","error"]]]]],[0,"config","","",null,null],[3,"Config","node::cli::config","",null,null],[12,"network","","",0,null],[17,"_IMPL_DESERIALIZE_FOR_Config","","",null,null],[0,"log","node","",null,null],[5,"setup_logging","node::log","",null,[[],["logger"]]],[11,"from","node::cli::config","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clear","","",0,[[["self"]]]],[11,"initialize","","",0,[[]]],[11,"vzip","","",0,[[],["v"]]],[11,"default","","",0,[[],["config"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]]],"p":[[3,"Config"]]};
searchIndex["raw_block"] = {"doc":"","i":[[8,"RawBlock","raw_block","Used to extract required encoded data and cid for block…",null,null],[11,"raw_data","","",0,[[["self"]],[["result",["vec","encodingerror"]],["vec",["u8"]],["encodingerror"]]]],[11,"cid","","returns the content identifier of the block",0,[[["self"]],[["error"],["result",["cid","error"]],["cid"]]]],[11,"raw_data","","",0,[[["self"]],[["result",["vec","encodingerror"]],["vec",["u8"]],["encodingerror"]]]],[11,"cid","","returns the content identifier of the block",0,[[["self"]],[["error"],["result",["cid","error"]],["cid"]]]]],"p":[[8,"RawBlock"]]};
searchIndex["runtime"] = {"doc":"","i":[[3,"Randomness","runtime","",null,null],[3,"CallerPattern","","",null,null],[3,"ActorStateHandle","","",null,null],[3,"IPLDObject","","",null,null],[3,"ComputeFunctionID","","",null,null],[8,"ActorCode","","Interface for invoking methods on an Actor",null,null],[10,"invoke_method","","Invokes method with runtime on the actor's code. Method…",0,[[["serialized"],["methodnum"],["self"],["rt"]],["invocoutput"]]],[8,"Runtime","","Runtime is the VM's internal runtime object. this is…",null,null],[10,"curr_epoch","","Retrieves current epoch",1,[[["self"]],["chainepoch"]]],[10,"randomness","","Randomness returns a (pseudo)random stream (indexed by…",1,[[["u64"],["self"],["chainepoch"]],["randomness"]]],[10,"immediate_caller","","Not necessarily the actor in the From field of the initial…",1,[[["self"]],["address"]]],[10,"validate_immediate_caller_is","","",1,[[["address"],["self"]]]],[10,"validate_immediate_caller_accept_any","","",1,[[["self"]]]],[10,"validate_immediate_caller_matches","","",1,[[["callerpattern"],["self"]]]],[10,"curr_receiver","","The address of the actor receiving the message.",1,[[["self"]],["address"]]],[10,"top_level_block_winner","","The actor who mined the block in which the initial…",1,[[["self"]],["address"]]],[10,"acquire_state","","",1,[[["self"]],["actorstatehandle"]]],[10,"success_return","","Return successfully from invocation.",1,[[["self"]],["invocoutput"]]],[10,"value_return","","Return from invocation with a value.",1,[[["vec",["u8"]],["self"],["u8"]],["invocoutput"]]],[10,"abort","","Throw an error indicating a failure condition has…",1,[[["str"],["self"],["exitcode"]]]],[10,"abort_arg_msg","","Calls Abort with InvalidArguments error.",1,[[["string"],["self"]]]],[10,"abort_arg","","",1,[[["self"]]]],[10,"abort_state_msg","","Calls Abort with InconsistentState error.",1,[[["string"],["self"]]]],[10,"abort_state","","",1,[[["self"]]]],[10,"abort_funds_msg","","Calls Abort with InsufficientFunds error.",1,[[["string"],["self"]]]],[10,"abort_funds","","",1,[[["self"]]]],[10,"abort_api","","Calls Abort with RuntimeAPIError. For internal use only…",1,[[["string"],["self"]]]],[10,"assert","","Check that the given condition is true (and call Abort if…",1,[[["self"],["bool"]]]],[10,"current_balance","","Retrieves current balance in VM.",1,[[["self"]],["tokenamount"]]],[10,"value_received","","Retrieves value received in VM.",1,[[["self"]],["tokenamount"]]],[10,"verify_signature","","",1,[[["unsignedmessage"],["signature"],["address"],["self"]],["bool"]]],[10,"compute","","Run a (pure function) computation, consuming the gas cost…",1,[[["computefunctionid"],["any"],["self"]],["any"]]],[10,"send_propagating_errors","","Send allows the current execution context to invoke…",1,[[["self"],["invocinput"]],["invocoutput"]]],[10,"send_catching_errors","","",1,[[["self"],["invocinput"]],[["invocoutput"],["result",["invocoutput","exitcode"]],["exitcode"]]]],[10,"new_actor_address","","Computes an address for a new actor. The returned address…",1,[[["self"]],["address"]]],[10,"create_actor","","Create an actor in the state tree. May only be called by…",1,[[["address"],["tokenamount"],["any"],["self"],["cid"]]]],[10,"ipld_get","","",1,[[["self"],["cid"]],[["result",["vec","string"]],["vec",["u8"]],["string"]]]],[10,"ipld_put","","",1,[[["ipldobject"],["self"]],["cid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]]],"p":[[8,"ActorCode"],[8,"Runtime"],[3,"Randomness"],[3,"CallerPattern"],[3,"ActorStateHandle"],[3,"IPLDObject"],[3,"ComputeFunctionID"]]};
searchIndex["state_tree"] = {"doc":"","i":[[3,"HamtStateTree","state_tree","State tree implementation using hamt",null,null],[8,"StateTree","","",null,null],[10,"get_actor","","",0,[[["address"],["self"]],[["option",["actorstate"]],["actorstate"]]]],[10,"set_actor","","",0,[[["address"],["self"],["actorstate"]],[["result",["string"]],["string"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"get_actor","","",1,[[["address"],["self"]],[["option",["actorstate"]],["actorstate"]]]],[11,"set_actor","","",1,[[["address"],["self"],["actorstate"]],[["result",["string"]],["string"]]]],[11,"default","","Constructor for a hamt state tree given an IPLD store",1,[[],["self"]]]],"p":[[8,"StateTree"],[3,"HamtStateTree"]]};
searchIndex["sync_manager"] = {"doc":"","i":[[3,"SyncManager","sync_manager","",null,null],[4,"Error","","",null,null],[13,"NoBlocks","","",0,null],[13,"Blockchain","","Error originating constructing blockchain structures",0,null],[13,"Encoding","","Error originating from encoding arbitrary data",0,null],[13,"InvalidCid","","Error originating from CID construction",0,null],[13,"InvalidRoots","","Error indicating an invalid root",0,null],[13,"Store","","Error indicating a chain store error",0,null],[13,"KeyValueStore","","Error originating from key-value store",0,null],[11,"schedule_tipset","","",1,[[["self"],["tipset"]]]],[11,"select_sync_target","","",1,[[["self"]],[["option",["tipset"]],["tipset"]]]],[11,"set_peer_head","","",1,[[["peerid"],["self"],["tipset"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clear","","",1,[[["self"]]]],[11,"initialize","","",1,[[]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",0,[[["blkerr"]],["error"]]],[11,"from","","",0,[[["dberr"]],["error"]]],[11,"from","","",0,[[["encerr"]],["error"]]],[11,"from","","",0,[[["serdeerr"]],["error"]]],[11,"from","","",0,[[["ciderr"]],["error"]]],[11,"from","","",0,[[["storeerr"]],["error"]]],[11,"default","","",1,[[],["syncmanager"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[4,"Error"],[3,"SyncManager"]]};
searchIndex["utils"] = {"doc":"","i":[[5,"write_to_file","utils","Writes a string to a specified file. Creates the desired…",null,[[["str"]],["result"]]],[5,"read_file_to_vec","","Read file as a `Vec<u8>`",null,[[["str"]],[["result",["vec"]],["vec",["u8"]]]]],[5,"read_file_to_string","","Read file as a `String`.",null,[[["str"]],[["string"],["result",["string"]]]]],[5,"get_home_dir","","Gets the home directory of the current system. Will return…",null,[[],["string"]]],[5,"read_toml","","Converts a toml file represented as a string to `S`",null,[[["str"]],["result"]]]],"p":[]};
searchIndex["vm"] = {"doc":"","i":[[3,"InvocInput","vm","Input variables for actor method invocation.",null,null],[12,"to","","",0,null],[12,"method","","",0,null],[12,"params","","",0,null],[12,"value","","",0,null],[3,"InvocOutput","","Output variables for actor method invocation.",null,null],[12,"exit_code","","",1,null],[12,"return_value","","",1,null],[3,"MethodNum","","Method number indicator for calling actor methods",null,null],[3,"Serialized","","Serialized bytes to be used as parameters into actor methods",null,null],[3,"TokenAmount","","Wrapper around a big int variable to handle token specific…",null,null],[12,"0","","",2,null],[4,"ExitCode","","ExitCode defines the exit code from the VM execution",null,null],[13,"Success","","Code for successful VM execution",3,null],[13,"SystemErrorCode","","VM execution failed with system error",3,null],[13,"UserDefinedError","","VM execution failed with a user code",3,null],[4,"SysCode","","Defines the system error codes defined by the protocol",null,null],[13,"ActorNotFound","","ActorNotFound represents a failure to find an actor.",4,null],[13,"ActorCodeNotFound","","ActorCodeNotFound represents a failure to find the code…",4,null],[13,"InvalidMethod","","InvalidMethod represents a failure to find a method in an…",4,null],[13,"InvalidArguments","","InvalidArguments indicates that a method was called with…",4,null],[13,"InsufficientFunds","","InsufficientFunds represents a failure to apply a message,…",4,null],[13,"InvalidCallSeqNum","","InvalidCallSeqNum represents a message invocation out of…",4,null],[13,"OutOfGas","","OutOfGas is returned when the execution of an actor method…",4,null],[13,"RuntimeAPIError","","RuntimeAPIError is returned when an actor method…",4,null],[13,"RuntimeAssertFailure","","RuntimeAssertFailure is returned when an actor method…",4,null],[13,"MethodSubcallError","","MethodSubcallError is returned when an actor method's Send…",4,null],[4,"UserCode","","defines user specific error codes from VM execution",null,null],[13,"InsufficientFunds","","",5,null],[13,"InvalidArguments","","",5,null],[13,"InconsistentState","","",5,null],[13,"InvalidSectorPacking","","",5,null],[13,"SealVerificationFailed","","",5,null],[13,"DeadlineExceeded","","",5,null],[13,"InsufficientPledgeCollateral","","",5,null],[11,"is_success","","returns true if the exit code was a success",3,[[["self"]],["bool"]]],[11,"is_error","","returns true if exited with an error code",3,[[["self"]],["bool"]]],[11,"allows_state_update","","returns true if the execution was successful",3,[[["self"]],["bool"]]],[11,"create_error","","",1,[[["exitcode"]],["self"]]],[11,"new","","Constructor for new MethodNum",6,[[["u64"]],["self"]]],[11,"new","","Constructor if data is encoded already",7,[[["vec",["u8"]],["u8"]],["self"]]],[11,"serialize","","Contructor for encoding Cbor encodable structure",7,[[["serialize"]],[["encodingerror"],["result",["encodingerror"]]]]],[11,"bytes","","Returns serialized bytes",7,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"new","","",2,[[["u64"]],["self"]]],[17,"METHOD_SEND","","Base actor send method",null,null],[17,"METHOD_CONSTRUCTOR","","Base actor constructor method",null,null],[17,"METHOD_CRON","","Base actor cron method",null,null],[17,"METHOD_PLACEHOLDER","","Placeholder for non base methods for actors",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",1,[[["exitcode"]],["invocoutput"]]],[11,"clone","","",3,[[["self"]],["exitcode"]]],[11,"clone","","",4,[[["self"]],["syscode"]]],[11,"clone","","",5,[[["self"]],["usercode"]]],[11,"clone","","",6,[[["self"]],["methodnum"]]],[11,"clone","","",7,[[["self"]],["serialized"]]],[11,"clone","","",2,[[["self"]],["tokenamount"]]],[11,"default","","",6,[[],["methodnum"]]],[11,"default","","",7,[[],["serialized"]]],[11,"default","","",2,[[],["tokenamount"]]],[11,"eq","","",3,[[["exitcode"],["self"]],["bool"]]],[11,"ne","","",3,[[["exitcode"],["self"]],["bool"]]],[11,"eq","","",4,[[["syscode"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["usercode"]],["bool"]]],[11,"eq","","",6,[[["methodnum"],["self"]],["bool"]]],[11,"ne","","",6,[[["methodnum"],["self"]],["bool"]]],[11,"eq","","",7,[[["serialized"],["self"]],["bool"]]],[11,"ne","","",7,[[["serialized"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["tokenamount"]],["bool"]]],[11,"ne","","",2,[[["self"],["tokenamount"]],["bool"]]],[11,"deref","","",7,[[["self"]]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",6,[[["self"],["__s"]],["result"]]],[11,"serialize","","",7,[[["s"],["self"]],["result"]]],[11,"serialize","","",2,[[["s"],["self"]],["result"]]],[11,"deserialize","","",6,[[["__d"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result"]]]],"p":[[3,"InvocInput"],[3,"InvocOutput"],[3,"TokenAmount"],[4,"ExitCode"],[4,"SysCode"],[4,"UserCode"],[3,"MethodNum"],[3,"Serialized"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);