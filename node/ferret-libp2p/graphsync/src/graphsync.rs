// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `graphsync.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct GraphsyncMessage {
    // message fields
    pub completeRequestList: bool,
    pub requests: ::protobuf::RepeatedField<GraphsyncMessage_Request>,
    pub responses: ::protobuf::RepeatedField<GraphsyncMessage_Response>,
    pub data: ::protobuf::RepeatedField<GraphsyncMessage_Block>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphsyncMessage {
    fn default() -> &'a GraphsyncMessage {
        <GraphsyncMessage as ::protobuf::Message>::default_instance()
    }
}

impl GraphsyncMessage {
    pub fn new() -> GraphsyncMessage {
        ::std::default::Default::default()
    }

    // bool completeRequestList = 1;


    pub fn get_completeRequestList(&self) -> bool {
        self.completeRequestList
    }
    pub fn clear_completeRequestList(&mut self) {
        self.completeRequestList = false;
    }

    // Param is passed by value, moved
    pub fn set_completeRequestList(&mut self, v: bool) {
        self.completeRequestList = v;
    }

    // repeated .GraphsyncMessage.Request requests = 2;


    pub fn get_requests(&self) -> &[GraphsyncMessage_Request] {
        &self.requests
    }
    pub fn clear_requests(&mut self) {
        self.requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_requests(&mut self, v: ::protobuf::RepeatedField<GraphsyncMessage_Request>) {
        self.requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requests(&mut self) -> &mut ::protobuf::RepeatedField<GraphsyncMessage_Request> {
        &mut self.requests
    }

    // Take field
    pub fn take_requests(&mut self) -> ::protobuf::RepeatedField<GraphsyncMessage_Request> {
        ::std::mem::replace(&mut self.requests, ::protobuf::RepeatedField::new())
    }

    // repeated .GraphsyncMessage.Response responses = 3;


    pub fn get_responses(&self) -> &[GraphsyncMessage_Response] {
        &self.responses
    }
    pub fn clear_responses(&mut self) {
        self.responses.clear();
    }

    // Param is passed by value, moved
    pub fn set_responses(&mut self, v: ::protobuf::RepeatedField<GraphsyncMessage_Response>) {
        self.responses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_responses(&mut self) -> &mut ::protobuf::RepeatedField<GraphsyncMessage_Response> {
        &mut self.responses
    }

    // Take field
    pub fn take_responses(&mut self) -> ::protobuf::RepeatedField<GraphsyncMessage_Response> {
        ::std::mem::replace(&mut self.responses, ::protobuf::RepeatedField::new())
    }

    // repeated .GraphsyncMessage.Block data = 4;


    pub fn get_data(&self) -> &[GraphsyncMessage_Block] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::protobuf::RepeatedField<GraphsyncMessage_Block>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::protobuf::RepeatedField<GraphsyncMessage_Block> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::protobuf::RepeatedField<GraphsyncMessage_Block> {
        ::std::mem::replace(&mut self.data, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GraphsyncMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.requests {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.responses {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.completeRequestList = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.requests)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.responses)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.completeRequestList != false {
            my_size += 2;
        }
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.completeRequestList != false {
            os.write_bool(1, self.completeRequestList)?;
        }
        for v in &self.requests {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.responses {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.data {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphsyncMessage {
        GraphsyncMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "completeRequestList",
                    |m: &GraphsyncMessage| { &m.completeRequestList },
                    |m: &mut GraphsyncMessage| { &mut m.completeRequestList },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphsyncMessage_Request>>(
                    "requests",
                    |m: &GraphsyncMessage| { &m.requests },
                    |m: &mut GraphsyncMessage| { &mut m.requests },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphsyncMessage_Response>>(
                    "responses",
                    |m: &GraphsyncMessage| { &m.responses },
                    |m: &mut GraphsyncMessage| { &mut m.responses },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphsyncMessage_Block>>(
                    "data",
                    |m: &GraphsyncMessage| { &m.data },
                    |m: &mut GraphsyncMessage| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GraphsyncMessage>(
                    "GraphsyncMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GraphsyncMessage {
        static mut instance: ::protobuf::lazy::Lazy<GraphsyncMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GraphsyncMessage,
        };
        unsafe {
            instance.get(GraphsyncMessage::new)
        }
    }
}

impl ::protobuf::Clear for GraphsyncMessage {
    fn clear(&mut self) {
        self.completeRequestList = false;
        self.requests.clear();
        self.responses.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphsyncMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphsyncMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphsyncMessage_Request {
    // message fields
    pub id: i32,
    pub root: ::std::vec::Vec<u8>,
    pub selector: ::std::vec::Vec<u8>,
    pub extensions: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>,
    pub priority: i32,
    pub cancel: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphsyncMessage_Request {
    fn default() -> &'a GraphsyncMessage_Request {
        <GraphsyncMessage_Request as ::protobuf::Message>::default_instance()
    }
}

impl GraphsyncMessage_Request {
    pub fn new() -> GraphsyncMessage_Request {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // bytes root = 2;


    pub fn get_root(&self) -> &[u8] {
        &self.root
    }
    pub fn clear_root(&mut self) {
        self.root.clear();
    }

    // Param is passed by value, moved
    pub fn set_root(&mut self, v: ::std::vec::Vec<u8>) {
        self.root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.root
    }

    // Take field
    pub fn take_root(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.root, ::std::vec::Vec::new())
    }

    // bytes selector = 3;


    pub fn get_selector(&self) -> &[u8] {
        &self.selector
    }
    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::vec::Vec<u8>) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.selector, ::std::vec::Vec::new())
    }

    // repeated .GraphsyncMessage.Request.ExtensionsEntry extensions = 4;


    pub fn get_extensions(&self) -> &::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &self.extensions
    }
    pub fn clear_extensions(&mut self) {
        self.extensions.clear();
    }

    // Param is passed by value, moved
    pub fn set_extensions(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>) {
        self.extensions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_extensions(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &mut self.extensions
    }

    // Take field
    pub fn take_extensions(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.extensions, ::std::collections::HashMap::new())
    }

    // int32 priority = 5;


    pub fn get_priority(&self) -> i32 {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: i32) {
        self.priority = v;
    }

    // bool cancel = 6;


    pub fn get_cancel(&self) -> bool {
        self.cancel
    }
    pub fn clear_cancel(&mut self) {
        self.cancel = false;
    }

    // Param is passed by value, moved
    pub fn set_cancel(&mut self, v: bool) {
        self.cancel = v;
    }
}

impl ::protobuf::Message for GraphsyncMessage_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.root)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.selector)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(wire_type, is, &mut self.extensions)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.priority = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.cancel = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.root.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.root);
        }
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.selector);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(4, &self.extensions);
        if self.priority != 0 {
            my_size += ::protobuf::rt::value_size(5, self.priority, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cancel != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.root.is_empty() {
            os.write_bytes(2, &self.root)?;
        }
        if !self.selector.is_empty() {
            os.write_bytes(3, &self.selector)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(4, &self.extensions, os)?;
        if self.priority != 0 {
            os.write_int32(5, self.priority)?;
        }
        if self.cancel != false {
            os.write_bool(6, self.cancel)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphsyncMessage_Request {
        GraphsyncMessage_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "id",
                    |m: &GraphsyncMessage_Request| { &m.id },
                    |m: &mut GraphsyncMessage_Request| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "root",
                    |m: &GraphsyncMessage_Request| { &m.root },
                    |m: &mut GraphsyncMessage_Request| { &mut m.root },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "selector",
                    |m: &GraphsyncMessage_Request| { &m.selector },
                    |m: &mut GraphsyncMessage_Request| { &mut m.selector },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(
                    "extensions",
                    |m: &GraphsyncMessage_Request| { &m.extensions },
                    |m: &mut GraphsyncMessage_Request| { &mut m.extensions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "priority",
                    |m: &GraphsyncMessage_Request| { &m.priority },
                    |m: &mut GraphsyncMessage_Request| { &mut m.priority },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "cancel",
                    |m: &GraphsyncMessage_Request| { &m.cancel },
                    |m: &mut GraphsyncMessage_Request| { &mut m.cancel },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GraphsyncMessage_Request>(
                    "GraphsyncMessage_Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GraphsyncMessage_Request {
        static mut instance: ::protobuf::lazy::Lazy<GraphsyncMessage_Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GraphsyncMessage_Request,
        };
        unsafe {
            instance.get(GraphsyncMessage_Request::new)
        }
    }
}

impl ::protobuf::Clear for GraphsyncMessage_Request {
    fn clear(&mut self) {
        self.id = 0;
        self.root.clear();
        self.selector.clear();
        self.extensions.clear();
        self.priority = 0;
        self.cancel = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphsyncMessage_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphsyncMessage_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphsyncMessage_Response {
    // message fields
    pub id: i32,
    pub status: i32,
    pub extensions: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphsyncMessage_Response {
    fn default() -> &'a GraphsyncMessage_Response {
        <GraphsyncMessage_Response as ::protobuf::Message>::default_instance()
    }
}

impl GraphsyncMessage_Response {
    pub fn new() -> GraphsyncMessage_Response {
        ::std::default::Default::default()
    }

    // int32 id = 1;


    pub fn get_id(&self) -> i32 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    // int32 status = 2;


    pub fn get_status(&self) -> i32 {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = 0;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: i32) {
        self.status = v;
    }

    // repeated .GraphsyncMessage.Response.ExtensionsEntry extensions = 3;


    pub fn get_extensions(&self) -> &::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &self.extensions
    }
    pub fn clear_extensions(&mut self) {
        self.extensions.clear();
    }

    // Param is passed by value, moved
    pub fn set_extensions(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>>) {
        self.extensions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_extensions(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        &mut self.extensions
    }

    // Take field
    pub fn take_extensions(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.extensions, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for GraphsyncMessage_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.status = tmp;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(wire_type, is, &mut self.extensions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.status != 0 {
            my_size += ::protobuf::rt::value_size(2, self.status, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(3, &self.extensions);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if self.status != 0 {
            os.write_int32(2, self.status)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(3, &self.extensions, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphsyncMessage_Response {
        GraphsyncMessage_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "id",
                    |m: &GraphsyncMessage_Response| { &m.id },
                    |m: &mut GraphsyncMessage_Response| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "status",
                    |m: &GraphsyncMessage_Response| { &m.status },
                    |m: &mut GraphsyncMessage_Response| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeBytes>(
                    "extensions",
                    |m: &GraphsyncMessage_Response| { &m.extensions },
                    |m: &mut GraphsyncMessage_Response| { &mut m.extensions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GraphsyncMessage_Response>(
                    "GraphsyncMessage_Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GraphsyncMessage_Response {
        static mut instance: ::protobuf::lazy::Lazy<GraphsyncMessage_Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GraphsyncMessage_Response,
        };
        unsafe {
            instance.get(GraphsyncMessage_Response::new)
        }
    }
}

impl ::protobuf::Clear for GraphsyncMessage_Response {
    fn clear(&mut self) {
        self.id = 0;
        self.status = 0;
        self.extensions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphsyncMessage_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphsyncMessage_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphsyncMessage_Block {
    // message fields
    pub prefix: ::std::vec::Vec<u8>,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphsyncMessage_Block {
    fn default() -> &'a GraphsyncMessage_Block {
        <GraphsyncMessage_Block as ::protobuf::Message>::default_instance()
    }
}

impl GraphsyncMessage_Block {
    pub fn new() -> GraphsyncMessage_Block {
        ::std::default::Default::default()
    }

    // bytes prefix = 1;


    pub fn get_prefix(&self) -> &[u8] {
        &self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::vec::Vec<u8>) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.prefix, ::std::vec::Vec::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GraphsyncMessage_Block {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.prefix)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.prefix);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.prefix.is_empty() {
            os.write_bytes(1, &self.prefix)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphsyncMessage_Block {
        GraphsyncMessage_Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "prefix",
                    |m: &GraphsyncMessage_Block| { &m.prefix },
                    |m: &mut GraphsyncMessage_Block| { &mut m.prefix },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &GraphsyncMessage_Block| { &m.data },
                    |m: &mut GraphsyncMessage_Block| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GraphsyncMessage_Block>(
                    "GraphsyncMessage_Block",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GraphsyncMessage_Block {
        static mut instance: ::protobuf::lazy::Lazy<GraphsyncMessage_Block> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GraphsyncMessage_Block,
        };
        unsafe {
            instance.get(GraphsyncMessage_Block::new)
        }
    }
}

impl ::protobuf::Clear for GraphsyncMessage_Block {
    fn clear(&mut self) {
        self.prefix.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphsyncMessage_Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphsyncMessage_Block {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fgraphsync.proto\"\xe1\x05\n\x10GraphsyncMessage\x120\n\x13complete\
    RequestList\x18\x01\x20\x01(\x08R\x13completeRequestList\x125\n\x08reque\
    sts\x18\x02\x20\x03(\x0b2\x19.GraphsyncMessage.RequestR\x08requests\x128\
    \n\tresponses\x18\x03\x20\x03(\x0b2\x1a.GraphsyncMessage.ResponseR\tresp\
    onses\x12+\n\x04data\x18\x04\x20\x03(\x0b2\x17.GraphsyncMessage.BlockR\
    \x04data\x1a\x87\x02\n\x07Request\x12\x0e\n\x02id\x18\x01\x20\x01(\x05R\
    \x02id\x12\x12\n\x04root\x18\x02\x20\x01(\x0cR\x04root\x12\x1a\n\x08sele\
    ctor\x18\x03\x20\x01(\x0cR\x08selector\x12I\n\nextensions\x18\x04\x20\
    \x03(\x0b2).GraphsyncMessage.Request.ExtensionsEntryR\nextensions\x12\
    \x1a\n\x08priority\x18\x05\x20\x01(\x05R\x08priority\x12\x16\n\x06cancel\
    \x18\x06\x20\x01(\x08R\x06cancel\x1a=\n\x0fExtensionsEntry\x12\x10\n\x03\
    key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\
    \x05value:\x028\x01\x1a\xbd\x01\n\x08Response\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\x05R\x02id\x12\x16\n\x06status\x18\x02\x20\x01(\x05R\x06status\
    \x12J\n\nextensions\x18\x03\x20\x03(\x0b2*.GraphsyncMessage.Response.Ext\
    ensionsEntryR\nextensions\x1a=\n\x0fExtensionsEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05valu\
    e:\x028\x01\x1a3\n\x05Block\x12\x16\n\x06prefix\x18\x01\x20\x01(\x0cR\
    \x06prefix\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04dataJ\xb5\x0e\n\
    \x06\x12\x04\0\0\x1d\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\
    \x12\x04\x02\0\x1d\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x18\n\x0c\n\
    \x04\x04\0\x03\0\x12\x04\x04\x02\x0b\x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\
    \x03\x04\n\x11\n4\n\x06\x04\0\x03\0\x02\0\x12\x03\x05\x04\x11\"%\x20uniq\
    ue\x20id\x20set\x20on\x20the\x20requester\x20side\n\n\x0f\n\x07\x04\0\
    \x03\0\x02\0\x04\x12\x04\x05\x04\x04\x13\n\x0e\n\x07\x04\0\x03\0\x02\0\
    \x05\x12\x03\x05\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x05\n\
    \x0c\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x05\x0f\x10\n5\n\x06\x04\
    \0\x03\0\x02\x01\x12\x03\x06\x04\x13\"&\x20a\x20CID\x20for\x20the\x20roo\
    t\x20node\x20in\x20the\x20query\n\n\x0f\n\x07\x04\0\x03\0\x02\x01\x04\
    \x12\x04\x06\x04\x05\x11\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\x06\
    \x04\t\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\x06\n\x0e\n\x0e\n\x07\
    \x04\0\x03\0\x02\x01\x03\x12\x03\x06\x11\x12\n*\n\x06\x04\0\x03\0\x02\
    \x02\x12\x03\x07\x04\x17\"\x1b\x20ipld\x20selector\x20to\x20retrieve\n\n\
    \x0f\n\x07\x04\0\x03\0\x02\x02\x04\x12\x04\x07\x04\x06\x13\n\x0e\n\x07\
    \x04\0\x03\0\x02\x02\x05\x12\x03\x07\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\
    \x02\x01\x12\x03\x07\n\x12\n\x0e\n\x07\x04\0\x03\0\x02\x02\x03\x12\x03\
    \x07\x15\x16\n)\n\x06\x04\0\x03\0\x02\x03\x12\x03\x08\x04&\"\x1a\x20side\
    \x20channel\x20information\n\n\x0f\n\x07\x04\0\x03\0\x02\x03\x04\x12\x04\
    \x08\x04\x07\x17\n\x0e\n\x07\x04\0\x03\0\x02\x03\x06\x12\x03\x08\x04\x16\
    \n\x0e\n\x07\x04\0\x03\0\x02\x03\x01\x12\x03\x08\x17!\n\x0e\n\x07\x04\0\
    \x03\0\x02\x03\x03\x12\x03\x08$%\n8\n\x06\x04\0\x03\0\x02\x04\x12\x03\t\
    \x04\x17\")\x20the\x20priority\x20(normalized).\x20default\x20to\x201\n\
    \n\x0f\n\x07\x04\0\x03\0\x02\x04\x04\x12\x04\t\x04\x08&\n\x0e\n\x07\x04\
    \0\x03\0\x02\x04\x05\x12\x03\t\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\x04\x01\
    \x12\x03\t\n\x12\n\x0e\n\x07\x04\0\x03\0\x02\x04\x03\x12\x03\t\x15\x16\n\
    /\n\x06\x04\0\x03\0\x02\x05\x12\x03\n\x04\x15\"\x20\x20whether\x20this\
    \x20cancels\x20a\x20request\n\n\x0f\n\x07\x04\0\x03\0\x02\x05\x04\x12\
    \x04\n\x04\t\x17\n\x0e\n\x07\x04\0\x03\0\x02\x05\x05\x12\x03\n\x04\x08\n\
    \x0e\n\x07\x04\0\x03\0\x02\x05\x01\x12\x03\n\n\x10\n\x0e\n\x07\x04\0\x03\
    \0\x02\x05\x03\x12\x03\n\x13\x14\n\x0c\n\x04\x04\0\x03\x01\x12\x04\r\x02\
    \x11\x03\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03\r\n\x12\n\x1f\n\x06\x04\0\
    \x03\x01\x02\0\x12\x03\x0e\x04\x11\"\x10\x20the\x20request\x20id\n\n\x0f\
    \n\x07\x04\0\x03\x01\x02\0\x04\x12\x04\x0e\x04\r\x14\n\x0e\n\x07\x04\0\
    \x03\x01\x02\0\x05\x12\x03\x0e\x04\t\n\x0e\n\x07\x04\0\x03\x01\x02\0\x01\
    \x12\x03\x0e\n\x0c\n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x03\x0e\x0f\
    \x10\n\x1f\n\x06\x04\0\x03\x01\x02\x01\x12\x03\x0f\x04\x15\"\x10\x20a\
    \x20status\x20code.\n\n\x0f\n\x07\x04\0\x03\x01\x02\x01\x04\x12\x04\x0f\
    \x04\x0e\x11\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x05\x12\x03\x0f\x04\t\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x03\x0f\n\x10\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x01\x03\x12\x03\x0f\x13\x14\n)\n\x06\x04\0\x03\x01\x02\x02\
    \x12\x03\x10\x04&\"\x1a\x20side\x20channel\x20information\n\n\x0f\n\x07\
    \x04\0\x03\x01\x02\x02\x04\x12\x04\x10\x04\x0f\x15\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x02\x06\x12\x03\x10\x04\x16\n\x0e\n\x07\x04\0\x03\x01\x02\x02\
    \x01\x12\x03\x10\x17!\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x03\x12\x03\x10$\
    %\n\x0c\n\x04\x04\0\x03\x02\x12\x04\x13\x02\x16\x03\n\x0c\n\x05\x04\0\
    \x03\x02\x01\x12\x03\x13\n\x0f\nY\n\x06\x04\0\x03\x02\x02\0\x12\x03\x14\
    \x08\x19\"J\x20CID\x20prefix\x20(cid\x20version,\x20multicodec\x20and\
    \x20multihash\x20prefix\x20(type\x20+\x20length)\n\n\x0f\n\x07\x04\0\x03\
    \x02\x02\0\x04\x12\x04\x14\x08\x13\x11\n\x0e\n\x07\x04\0\x03\x02\x02\0\
    \x05\x12\x03\x14\x08\r\n\x0e\n\x07\x04\0\x03\x02\x02\0\x01\x12\x03\x14\
    \x0e\x14\n\x0e\n\x07\x04\0\x03\x02\x02\0\x03\x12\x03\x14\x17\x18\n\r\n\
    \x06\x04\0\x03\x02\x02\x01\x12\x03\x15\x08\x17\n\x0f\n\x07\x04\0\x03\x02\
    \x02\x01\x04\x12\x04\x15\x08\x14\x19\n\x0e\n\x07\x04\0\x03\x02\x02\x01\
    \x05\x12\x03\x15\x08\r\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x01\x12\x03\x15\
    \x0e\x12\n\x0e\n\x07\x04\0\x03\x02\x02\x01\x03\x12\x03\x15\x15\x16\n\x85\
    \x01\n\x04\x04\0\x02\0\x12\x03\x19\x02\"\x1a*\x20the\x20actual\x20data\
    \x20included\x20in\x20this\x20message\n\"L\x20This\x20request\x20list\
    \x20includes\x20*all*\x20requests,\x20replacing\x20outstanding\x20reques\
    ts.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x19\x02\x16\x03\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x19\x02\x06\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x19\
    \x07\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x19\x20!\n$\n\x04\x04\0\x02\
    \x01\x12\x03\x1a\x02\"\"\x17\x20The\x20list\x20of\x20requests.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x04\x12\x03\x1a\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03\x1a\x0b\x12\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1a\x14\x1c\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1a\x20!\n%\n\x04\x04\0\x02\x02\x12\
    \x03\x1b\x02\"\"\x18\x20The\x20list\x20of\x20responses.\n\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03\x1b\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\
    \x03\x1b\x0b\x13\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x1b\x14\x1d\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03\x1b\x20!\n.\n\x04\x04\0\x02\x03\x12\x03\
    \x1c\x02\"\"!\x20Blocks\x20related\x20to\x20the\x20responses\n\n\x0c\n\
    \x05\x04\0\x02\x03\x04\x12\x03\x1c\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03\x1c\x0b\x10\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1c\x14\x18\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1c\x20!b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
